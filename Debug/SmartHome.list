
SmartHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070cc  080070cc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080070cc  080070cc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070cc  080070cc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080070d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00001544  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000155c  2000155c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b469  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000385d  00000000  00000000  0003b4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d8  00000000  00000000  0003ed10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001778  00000000  00000000  000405e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021553  00000000  00000000  00041d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d53a  00000000  00000000  000632b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca4a1  00000000  00000000  000807ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ac8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006940  00000000  00000000  0014ace0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007014 	.word	0x08007014

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08007014 	.word	0x08007014

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d101      	bne.n	80001f2 <print+0x12>
 80001ee:	2300      	movs	r3, #0
 80001f0:	e01d      	b.n	800022e <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f7ff ffea 	bl	80001d0 <strlen>
 80001fc:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000202:	e00c      	b.n	800021e <print+0x3e>
    if (write(*buffer++)) n++;
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	1c5a      	adds	r2, r3, #1
 8000208:	617a      	str	r2, [r7, #20]
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f812 	bl	8000236 <write>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d008      	beq.n	800022a <print+0x4a>
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	3301      	adds	r3, #1
 800021c:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	1e5a      	subs	r2, r3, #1
 8000222:	613a      	str	r2, [r7, #16]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d1ed      	bne.n	8000204 <print+0x24>
 8000228:	e000      	b.n	800022c <print+0x4c>
    else break;
 800022a:	bf00      	nop
  }
  return n;
 800022c:	68fb      	ldr	r3, [r7, #12]
}
 800022e:	4618      	mov	r0, r3
 8000230:	3718      	adds	r7, #24
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}

08000236 <write>:

inline void command(uint8_t value) {
  send(value, GPIO_PIN_RESET);
}

inline size_t write(uint8_t value) {
 8000236:	b580      	push	{r7, lr}
 8000238:	b082      	sub	sp, #8
 800023a:	af00      	add	r7, sp, #0
 800023c:	4603      	mov	r3, r0
 800023e:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2101      	movs	r1, #1
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f805 	bl	8000254 <send>
  return 1; // assume sucess
 800024a:	2301      	movs	r3, #1
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	460a      	mov	r2, r1
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	4613      	mov	r3, r2
 8000262:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <send+0x6c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a16      	ldr	r2, [pc, #88]	; (80002c4 <send+0x70>)
 800026a:	8811      	ldrh	r1, [r2, #0]
 800026c:	79ba      	ldrb	r2, [r7, #6]
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fd7e 	bl	8002d70 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8000274:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <send+0x74>)
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d007      	beq.n	800028c <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800027c:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <send+0x6c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <send+0x74>)
 8000282:	8811      	ldrh	r1, [r2, #0]
 8000284:	2200      	movs	r2, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fd72 	bl	8002d70 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <send+0x78>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f003 0310 	and.w	r3, r3, #16
 8000294:	2b00      	cmp	r3, #0
 8000296:	d004      	beq.n	80002a2 <send+0x4e>
    write8bits(value); 
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	4618      	mov	r0, r3
 800029c:	f000 f86c 	bl	8000378 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 80002a0:	e009      	b.n	80002b6 <send+0x62>
    write4bits(value>>4);
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	091b      	lsrs	r3, r3, #4
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f83b 	bl	8000324 <write4bits>
    write4bits(value);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f837 	bl	8000324 <write4bits>
}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000004c 	.word	0x2000004c
 80002c4:	20000034 	.word	0x20000034
 80002c8:	20000036 	.word	0x20000036
 80002cc:	20000050 	.word	0x20000050

080002d0 <pulseEnable>:

void pulseEnable(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <pulseEnable+0x4c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a11      	ldr	r2, [pc, #68]	; (8000320 <pulseEnable+0x50>)
 80002da:	8811      	ldrh	r1, [r2, #0]
 80002dc:	2200      	movs	r2, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fd46 	bl	8002d70 <HAL_GPIO_WritePin>
  osDelay(1);
 80002e4:	2001      	movs	r0, #1
 80002e6:	f005 fc78 	bl	8005bda <osDelay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <pulseEnable+0x4c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <pulseEnable+0x50>)
 80002f0:	8811      	ldrh	r1, [r2, #0]
 80002f2:	2201      	movs	r2, #1
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 fd3b 	bl	8002d70 <HAL_GPIO_WritePin>
  osDelay(1);    // enable pulse must be >450ns
 80002fa:	2001      	movs	r0, #1
 80002fc:	f005 fc6d 	bl	8005bda <osDelay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <pulseEnable+0x4c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a06      	ldr	r2, [pc, #24]	; (8000320 <pulseEnable+0x50>)
 8000306:	8811      	ldrh	r1, [r2, #0]
 8000308:	2200      	movs	r2, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fd30 	bl	8002d70 <HAL_GPIO_WritePin>
  osDelay(1);   // commands need > 37us to settle
 8000310:	2001      	movs	r0, #1
 8000312:	f005 fc62 	bl	8005bda <osDelay>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	2000004c 	.word	0x2000004c
 8000320:	20000038 	.word	0x20000038

08000324 <write4bits>:

void write4bits(uint8_t value) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e013      	b.n	800035c <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <write4bits+0x4c>)
 8000336:	6818      	ldr	r0, [r3, #0]
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <write4bits+0x50>)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000340:	79fa      	ldrb	r2, [r7, #7]
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	fa42 f303 	asr.w	r3, r2, r3
 8000348:	b2db      	uxtb	r3, r3
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	b2db      	uxtb	r3, r3
 8000350:	461a      	mov	r2, r3
 8000352:	f002 fd0d 	bl	8002d70 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	3301      	adds	r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	2b03      	cmp	r3, #3
 8000360:	dde8      	ble.n	8000334 <write4bits+0x10>
  }

  pulseEnable();
 8000362:	f7ff ffb5 	bl	80002d0 <pulseEnable>
}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	2000004c 	.word	0x2000004c
 8000374:	2000003c 	.word	0x2000003c

08000378 <write8bits>:

void write8bits(uint8_t value) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	e013      	b.n	80003b0 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <write8bits+0x4c>)
 800038a:	6818      	ldr	r0, [r3, #0]
 800038c:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <write8bits+0x50>)
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000394:	79fa      	ldrb	r2, [r7, #7]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	fa42 f303 	asr.w	r3, r2, r3
 800039c:	b2db      	uxtb	r3, r3
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	f002 fce3 	bl	8002d70 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	3301      	adds	r3, #1
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	2b07      	cmp	r3, #7
 80003b4:	dde8      	ble.n	8000388 <write8bits+0x10>
  }
  
  pulseEnable();
 80003b6:	f7ff ff8b 	bl	80002d0 <pulseEnable>
}
 80003ba:	bf00      	nop
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000004c 	.word	0x2000004c
 80003c8:	2000003c 	.word	0x2000003c

080003cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	4a07      	ldr	r2, [pc, #28]	; (80003f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80003dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	4a06      	ldr	r2, [pc, #24]	; (80003fc <vApplicationGetIdleTaskMemory+0x30>)
 80003e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2280      	movs	r2, #128	; 0x80
 80003e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	20000054 	.word	0x20000054
 80003fc:	200000a8 	.word	0x200000a8

08000400 <HAL_GPIO_EXTI_Callback>:
GPIO_TypeDef *const Column_ports[] = {GPIOD, GPIOD, GPIOD, GPIOD};
const uint16_t Column_pins[] = {GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7};
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b087      	sub	sp, #28
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	80fb      	strh	r3, [r7, #6]
  if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button de-bouncing
 800040a:	4b70      	ldr	r3, [pc, #448]	; (80005cc <HAL_GPIO_EXTI_Callback+0x1cc>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000412:	f000 fff7 	bl	8001404 <HAL_GetTick>
 8000416:	4603      	mov	r3, r0
 8000418:	429c      	cmp	r4, r3
 800041a:	f200 80cf 	bhi.w	80005bc <HAL_GPIO_EXTI_Callback+0x1bc>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 800041e:	f000 fff1 	bl	8001404 <HAL_GetTick>
 8000422:	4603      	mov	r3, r0
 8000424:	4a69      	ldr	r2, [pc, #420]	; (80005cc <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000426:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 8000428:	23ff      	movs	r3, #255	; 0xff
 800042a:	75fb      	strb	r3, [r7, #23]
  int8_t column_number = -1;
 800042c:	23ff      	movs	r3, #255	; 0xff
 800042e:	75bb      	strb	r3, [r7, #22]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000430:	2300      	movs	r3, #0
 8000432:	757b      	strb	r3, [r7, #21]
 8000434:	e00b      	b.n	800044e <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 8000436:	7d7b      	ldrb	r3, [r7, #21]
 8000438:	4a65      	ldr	r2, [pc, #404]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800043a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800043e:	88fa      	ldrh	r2, [r7, #6]
 8000440:	429a      	cmp	r2, r3
 8000442:	d101      	bne.n	8000448 <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 8000444:	7d7b      	ldrb	r3, [r7, #21]
 8000446:	75fb      	strb	r3, [r7, #23]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000448:	7d7b      	ldrb	r3, [r7, #21]
 800044a:	3301      	adds	r3, #1
 800044c:	757b      	strb	r3, [r7, #21]
 800044e:	7d7b      	ldrb	r3, [r7, #21]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d9f0      	bls.n	8000436 <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000454:	4b5f      	ldr	r3, [pc, #380]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000456:	2110      	movs	r1, #16
 8000458:	2200      	movs	r2, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f002 fc88 	bl	8002d70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000460:	4b5c      	ldr	r3, [pc, #368]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000462:	2120      	movs	r1, #32
 8000464:	2200      	movs	r2, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f002 fc82 	bl	8002d70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 800046c:	4b59      	ldr	r3, [pc, #356]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	2200      	movs	r2, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fc7c 	bl	8002d70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000478:	4b56      	ldr	r3, [pc, #344]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800047a:	2180      	movs	r1, #128	; 0x80
 800047c:	2200      	movs	r2, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f002 fc76 	bl	8002d70 <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000484:	2300      	movs	r3, #0
 8000486:	753b      	strb	r3, [r7, #20]
 8000488:	e02f      	b.n	80004ea <HAL_GPIO_EXTI_Callback+0xea>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 800048a:	7d3b      	ldrb	r3, [r7, #20]
 800048c:	4a52      	ldr	r2, [pc, #328]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800048e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000492:	7d3b      	ldrb	r3, [r7, #20]
 8000494:	4a51      	ldr	r2, [pc, #324]	; (80005dc <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800049a:	2201      	movs	r2, #1
 800049c:	4619      	mov	r1, r3
 800049e:	f002 fc67 	bl	8002d70 <HAL_GPIO_WritePin>
    int x = HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]);
 80004a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80004a6:	4a4e      	ldr	r2, [pc, #312]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80004a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80004b0:	4947      	ldr	r1, [pc, #284]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80004b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004b6:	4619      	mov	r1, r3
 80004b8:	4610      	mov	r0, r2
 80004ba:	f002 fc41 	bl	8002d40 <HAL_GPIO_ReadPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	60fb      	str	r3, [r7, #12]
    if (x != 0)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <HAL_GPIO_EXTI_Callback+0xcc>
    {
      column_number = col;
 80004c8:	7d3b      	ldrb	r3, [r7, #20]
 80004ca:	75bb      	strb	r3, [r7, #22]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 80004cc:	7d3b      	ldrb	r3, [r7, #20]
 80004ce:	4a42      	ldr	r2, [pc, #264]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80004d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004d4:	7d3b      	ldrb	r3, [r7, #20]
 80004d6:	4a41      	ldr	r2, [pc, #260]	; (80005dc <HAL_GPIO_EXTI_Callback+0x1dc>)
 80004d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	f002 fc46 	bl	8002d70 <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 80004e4:	7d3b      	ldrb	r3, [r7, #20]
 80004e6:	3301      	adds	r3, #1
 80004e8:	753b      	strb	r3, [r7, #20]
 80004ea:	7d3b      	ldrb	r3, [r7, #20]
 80004ec:	2b03      	cmp	r3, #3
 80004ee:	d9cc      	bls.n	800048a <HAL_GPIO_EXTI_Callback+0x8a>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 80004f0:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80004f2:	2110      	movs	r1, #16
 80004f4:	2201      	movs	r2, #1
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fc3a 	bl	8002d70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 80004fc:	4b35      	ldr	r3, [pc, #212]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80004fe:	2120      	movs	r1, #32
 8000500:	2201      	movs	r2, #1
 8000502:	4618      	mov	r0, r3
 8000504:	f002 fc34 	bl	8002d70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800050a:	2140      	movs	r1, #64	; 0x40
 800050c:	2201      	movs	r2, #1
 800050e:	4618      	mov	r0, r3
 8000510:	f002 fc2e 	bl	8002d70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000514:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	2201      	movs	r2, #1
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fc28 	bl	8002d70 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 8000520:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000528:	d04a      	beq.n	80005c0 <HAL_GPIO_EXTI_Callback+0x1c0>
 800052a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800052e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000532:	d045      	beq.n	80005c0 <HAL_GPIO_EXTI_Callback+0x1c0>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 8000534:	7dfb      	ldrb	r3, [r7, #23]
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	b2da      	uxtb	r2, r3
 800053a:	7dbb      	ldrb	r3, [r7, #22]
 800053c:	4413      	add	r3, r2
 800053e:	b2db      	uxtb	r3, r3
 8000540:	3301      	adds	r3, #1
 8000542:	74fb      	strb	r3, [r7, #19]
  switch (button_number)
 8000544:	7cfb      	ldrb	r3, [r7, #19]
 8000546:	3b01      	subs	r3, #1
 8000548:	2b0f      	cmp	r3, #15
 800054a:	d83b      	bhi.n	80005c4 <HAL_GPIO_EXTI_Callback+0x1c4>
 800054c:	a201      	add	r2, pc, #4	; (adr r2, 8000554 <HAL_GPIO_EXTI_Callback+0x154>)
 800054e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000552:	bf00      	nop
 8000554:	08000595 	.word	0x08000595
 8000558:	0800059d 	.word	0x0800059d
 800055c:	080005a5 	.word	0x080005a5
 8000560:	080005ad 	.word	0x080005ad
 8000564:	080005b5 	.word	0x080005b5
 8000568:	080005c5 	.word	0x080005c5
 800056c:	080005c5 	.word	0x080005c5
 8000570:	080005c5 	.word	0x080005c5
 8000574:	080005c5 	.word	0x080005c5
 8000578:	080005c5 	.word	0x080005c5
 800057c:	080005c5 	.word	0x080005c5
 8000580:	080005c5 	.word	0x080005c5
 8000584:	080005c5 	.word	0x080005c5
 8000588:	080005c5 	.word	0x080005c5
 800058c:	080005c5 	.word	0x080005c5
 8000590:	080005c5 	.word	0x080005c5
  {
  case 1:
    /* code */
	menu = 1;
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
    break;
 800059a:	e014      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0x1c6>
  case 2:
    /* code */
	menu = 2;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800059e:	2202      	movs	r2, #2
 80005a0:	601a      	str	r2, [r3, #0]
    break;
 80005a2:	e010      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0x1c6>
  case 3:
    /* code */
	menu = 3;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80005a6:	2203      	movs	r2, #3
 80005a8:	601a      	str	r2, [r3, #0]
    break;
 80005aa:	e00c      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0x1c6>
  case 4:
    /* code */
	menu = 4;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80005ae:	2204      	movs	r2, #4
 80005b0:	601a      	str	r2, [r3, #0]
    break;
 80005b2:	e008      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0x1c6>
  case 5:
    /* code */
	menu = 5;
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80005b6:	2205      	movs	r2, #5
 80005b8:	601a      	str	r2, [r3, #0]
    break;
 80005ba:	e004      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0x1c6>
    return;
 80005bc:	bf00      	nop
 80005be:	e002      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0x1c6>
    return; // Reject invalid scan
 80005c0:	bf00      	nop
 80005c2:	e000      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0x1c6>
  case 16:
    /* code */
    break;

  default:
    break;
 80005c4:	bf00      	nop
  }
}
 80005c6:	371c      	adds	r7, #28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	20000808 	.word	0x20000808
 80005d0:	0800707c 	.word	0x0800707c
 80005d4:	48000c00 	.word	0x48000c00
 80005d8:	08007084 	.word	0x08007084
 80005dc:	08007094 	.word	0x08007094
 80005e0:	0800706c 	.word	0x0800706c
 80005e4:	20000804 	.word	0x20000804

080005e8 <buzzerInit>:

void buzzerInit() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	buzzerPwmTimer = &htim3;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <buzzerInit+0x24>)
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <buzzerInit+0x28>)
 80005f0:	601a      	str	r2, [r3, #0]
	buzzerPwmChannel = TIM_CHANNEL_1;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <buzzerInit+0x2c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(buzzerPwmTimer, buzzerPwmChannel);
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <buzzerInit+0x24>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <buzzerInit+0x2c>)
 80005fe:	6812      	ldr	r2, [r2, #0]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fab2 	bl	8004b6c <HAL_TIM_PWM_Start>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200006ec 	.word	0x200006ec
 8000610:	200003b0 	.word	0x200003b0
 8000614:	200006f0 	.word	0x200006f0

08000618 <buzzerChangeTone>:

void buzzerChangeTone(uint16_t freq, uint16_t volume) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	460a      	mov	r2, r1
 8000622:	80fb      	strh	r3, [r7, #6]
 8000624:	4613      	mov	r3, r2
 8000626:	80bb      	strh	r3, [r7, #4]
	if (freq == 0 || freq > 20000) {
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d004      	beq.n	8000638 <buzzerChangeTone+0x20>
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000634:	4293      	cmp	r3, r2
 8000636:	d937      	bls.n	80006a8 <buzzerChangeTone+0x90>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, 0);
 8000638:	4b52      	ldr	r3, [pc, #328]	; (8000784 <buzzerChangeTone+0x16c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d105      	bne.n	800064c <buzzerChangeTone+0x34>
 8000640:	4b51      	ldr	r3, [pc, #324]	; (8000788 <buzzerChangeTone+0x170>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2200      	movs	r2, #0
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
 800064a:	e096      	b.n	800077a <buzzerChangeTone+0x162>
 800064c:	4b4d      	ldr	r3, [pc, #308]	; (8000784 <buzzerChangeTone+0x16c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b04      	cmp	r3, #4
 8000652:	d105      	bne.n	8000660 <buzzerChangeTone+0x48>
 8000654:	4b4c      	ldr	r3, [pc, #304]	; (8000788 <buzzerChangeTone+0x170>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	6393      	str	r3, [r2, #56]	; 0x38
 800065e:	e08c      	b.n	800077a <buzzerChangeTone+0x162>
 8000660:	4b48      	ldr	r3, [pc, #288]	; (8000784 <buzzerChangeTone+0x16c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b08      	cmp	r3, #8
 8000666:	d105      	bne.n	8000674 <buzzerChangeTone+0x5c>
 8000668:	4b47      	ldr	r3, [pc, #284]	; (8000788 <buzzerChangeTone+0x170>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000672:	e082      	b.n	800077a <buzzerChangeTone+0x162>
 8000674:	4b43      	ldr	r3, [pc, #268]	; (8000784 <buzzerChangeTone+0x16c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b0c      	cmp	r3, #12
 800067a:	d105      	bne.n	8000688 <buzzerChangeTone+0x70>
 800067c:	4b42      	ldr	r3, [pc, #264]	; (8000788 <buzzerChangeTone+0x170>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	e078      	b.n	800077a <buzzerChangeTone+0x162>
 8000688:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <buzzerChangeTone+0x16c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b10      	cmp	r3, #16
 800068e:	d105      	bne.n	800069c <buzzerChangeTone+0x84>
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <buzzerChangeTone+0x170>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	6593      	str	r3, [r2, #88]	; 0x58
 800069a:	e06e      	b.n	800077a <buzzerChangeTone+0x162>
 800069c:	4b3a      	ldr	r3, [pc, #232]	; (8000788 <buzzerChangeTone+0x170>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80006a6:	e068      	b.n	800077a <buzzerChangeTone+0x162>
	} else {
		const uint32_t internalClockFreq = HAL_RCC_GetSysClockFreq();
 80006a8:	f003 ff44 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 80006ac:	61f8      	str	r0, [r7, #28]
		const uint32_t prescaler = 1 + internalClockFreq / freq / 60000;
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	69fa      	ldr	r2, [r7, #28]
 80006b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b6:	4a35      	ldr	r2, [pc, #212]	; (800078c <buzzerChangeTone+0x174>)
 80006b8:	fba2 2303 	umull	r2, r3, r2, r3
 80006bc:	0b9b      	lsrs	r3, r3, #14
 80006be:	3301      	adds	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
		const uint32_t timerClock = internalClockFreq / prescaler;
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	617b      	str	r3, [r7, #20]
		const uint32_t periodCycles = timerClock / freq;
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d4:	613b      	str	r3, [r7, #16]
		const uint32_t pulseWidth = volume * periodCycles / 1000 / 2;
 80006d6:	88bb      	ldrh	r3, [r7, #4]
 80006d8:	693a      	ldr	r2, [r7, #16]
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <buzzerChangeTone+0x178>)
 80006e0:	fba2 2303 	umull	r2, r3, r2, r3
 80006e4:	09db      	lsrs	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

		buzzerPwmTimer->Instance->PSC = prescaler - 1;
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <buzzerChangeTone+0x170>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	69ba      	ldr	r2, [r7, #24]
 80006f0:	3a01      	subs	r2, #1
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
		buzzerPwmTimer->Instance->ARR = periodCycles - 1;
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <buzzerChangeTone+0x170>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	3a01      	subs	r2, #1
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
		buzzerPwmTimer->Instance->EGR = TIM_EGR_UG;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <buzzerChangeTone+0x170>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2201      	movs	r2, #1
 8000708:	615a      	str	r2, [r3, #20]

		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <buzzerChangeTone+0x16c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <buzzerChangeTone+0x106>
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <buzzerChangeTone+0x170>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800071c:	e02d      	b.n	800077a <buzzerChangeTone+0x162>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <buzzerChangeTone+0x16c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b04      	cmp	r3, #4
 8000724:	d105      	bne.n	8000732 <buzzerChangeTone+0x11a>
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <buzzerChangeTone+0x170>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000730:	e023      	b.n	800077a <buzzerChangeTone+0x162>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <buzzerChangeTone+0x16c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b08      	cmp	r3, #8
 8000738:	d105      	bne.n	8000746 <buzzerChangeTone+0x12e>
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <buzzerChangeTone+0x170>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000744:	e019      	b.n	800077a <buzzerChangeTone+0x162>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <buzzerChangeTone+0x16c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b0c      	cmp	r3, #12
 800074c:	d105      	bne.n	800075a <buzzerChangeTone+0x142>
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <buzzerChangeTone+0x170>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000758:	e00f      	b.n	800077a <buzzerChangeTone+0x162>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <buzzerChangeTone+0x16c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b10      	cmp	r3, #16
 8000760:	d105      	bne.n	800076e <buzzerChangeTone+0x156>
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <buzzerChangeTone+0x170>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800076c:	e005      	b.n	800077a <buzzerChangeTone+0x162>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <buzzerChangeTone+0x170>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000778:	e7ff      	b.n	800077a <buzzerChangeTone+0x162>
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200006f0 	.word	0x200006f0
 8000788:	200006ec 	.word	0x200006ec
 800078c:	45e7b273 	.word	0x45e7b273
 8000790:	10624dd3 	.word	0x10624dd3

08000794 <playTone>:

void playTone() {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	if (!playing)
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <playTone+0x24>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <playTone+0x12>
		playing = 1;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <playTone+0x24>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]

	buzzerChangeTone(2000, 2000);
 80007a6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80007aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007ae:	f7ff ff33 	bl	8000618 <buzzerChangeTone>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200006f4 	.word	0x200006f4

080007bc <getAvgOf64Array>:

uint32_t getAvgOf64Array(uint32_t *data) {
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	uint32_t res = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MaxSampleCount; i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	e00a      	b.n	80007e4 <getAvgOf64Array+0x28>
		res += data[i];
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MaxSampleCount; i++)
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3301      	adds	r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b3f      	cmp	r3, #63	; 0x3f
 80007e8:	ddf1      	ble.n	80007ce <getAvgOf64Array+0x12>
	return res >> 6;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	099b      	lsrs	r3, r3, #6
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC2) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <HAL_ADC_ConvCpltCallback+0x74>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d12b      	bne.n	8000866 <HAL_ADC_ConvCpltCallback+0x6a>
		uint32_t value = HAL_ADC_GetValue(&hadc2);
 800080e:	4819      	ldr	r0, [pc, #100]	; (8000874 <HAL_ADC_ConvCpltCallback+0x78>)
 8000810:	f001 f938 	bl	8001a84 <HAL_ADC_GetValue>
 8000814:	60f8      	str	r0, [r7, #12]
		uint32_t new_temp = (value * 3300 / 40950);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f640 42e4 	movw	r2, #3300	; 0xce4
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	4a15      	ldr	r2, [pc, #84]	; (8000878 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000822:	fba2 2303 	umull	r2, r3, r2, r3
 8000826:	0bdb      	lsrs	r3, r3, #15
 8000828:	60bb      	str	r3, [r7, #8]
		if (new_temp >= 0 && new_temp <= 99) {
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	2b63      	cmp	r3, #99	; 0x63
 800082e:	d817      	bhi.n	8000860 <HAL_ADC_ConvCpltCallback+0x64>
			temp_data[temp_position] = new_temp;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_ADC_ConvCpltCallback+0x80>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4912      	ldr	r1, [pc, #72]	; (8000880 <HAL_ADC_ConvCpltCallback+0x84>)
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			temp = getAvgOf64Array(temp_data);
 800083c:	4810      	ldr	r0, [pc, #64]	; (8000880 <HAL_ADC_ConvCpltCallback+0x84>)
 800083e:	f7ff ffbd 	bl	80007bc <getAvgOf64Array>
 8000842:	4603      	mov	r3, r0
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_ADC_ConvCpltCallback+0x88>)
 8000846:	6013      	str	r3, [r2, #0]
			temp_position = (temp_position + 1) % MaxSampleCount;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_ADC_ConvCpltCallback+0x80>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	425a      	negs	r2, r3
 8000850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000854:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000858:	bf58      	it	pl
 800085a:	4253      	negpl	r3, r2
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_ADC_ConvCpltCallback+0x80>)
 800085e:	6013      	str	r3, [r2, #0]
		}
		HAL_ADC_Start_IT(&hadc2);
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <HAL_ADC_ConvCpltCallback+0x78>)
 8000862:	f000 ffcf 	bl	8001804 <HAL_ADC_Start_IT>
	}
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	50000100 	.word	0x50000100
 8000874:	200002a8 	.word	0x200002a8
 8000878:	ccd99a67 	.word	0xccd99a67
 800087c:	20000800 	.word	0x20000800
 8000880:	200006fc 	.word	0x200006fc
 8000884:	200007fc 	.word	0x200007fc

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b5b0      	push	{r4, r5, r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088e:	f000 fd5f 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000892:	f000 f82b 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000896:	f000 f9e5 	bl	8000c64 <MX_GPIO_Init>
  MX_I2C1_Init();
 800089a:	f000 f8e9 	bl	8000a70 <MX_I2C1_Init>
  MX_SPI1_Init();
 800089e:	f000 f927 	bl	8000af0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80008a2:	f000 f9bd 	bl	8000c20 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 80008a6:	f000 f961 	bl	8000b6c <MX_TIM3_Init>
  MX_ADC2_Init();
 80008aa:	f000 f883 	bl	80009b4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc2);
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <main+0x58>)
 80008b0:	f000 ffa8 	bl	8001804 <HAL_ADC_Start_IT>

  buzzerInit();
 80008b4:	f7ff fe98 	bl	80005e8 <buzzerInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <main+0x5c>)
 80008ba:	1d3c      	adds	r4, r7, #4
 80008bc:	461d      	mov	r5, r3
 80008be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f005 f937 	bl	8005b42 <osThreadCreate>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <main+0x60>)
 80008d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008da:	f005 f92b 	bl	8005b34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008de:	e7fe      	b.n	80008de <main+0x56>
 80008e0:	200002a8 	.word	0x200002a8
 80008e4:	08007038 	.word	0x08007038
 80008e8:	200006e8 	.word	0x200006e8

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09e      	sub	sp, #120	; 0x78
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008f6:	2228      	movs	r2, #40	; 0x28
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f006 fb82 	bl	8007004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	223c      	movs	r2, #60	; 0x3c
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f006 fb74 	bl	8007004 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800091c:	2303      	movs	r3, #3
 800091e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000920:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000924:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092a:	2301      	movs	r3, #1
 800092c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092e:	2310      	movs	r3, #16
 8000930:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800093c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000940:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fc3a 	bl	80031c0 <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000952:	f000 facd 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2302      	movs	r3, #2
 800095c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000966:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000970:	2102      	movs	r1, #2
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fc62 	bl	800423c <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800097e:	f000 fab7 	bl	8000ef0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <SystemClock_Config+0xc4>)
 8000984:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000990:	2300      	movs	r3, #0
 8000992:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fe36 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009a2:	f000 faa5 	bl	8000ef0 <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3778      	adds	r7, #120	; 0x78
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	000200a0 	.word	0x000200a0

080009b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <MX_ADC2_Init+0xb4>)
 80009cc:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <MX_ADC2_Init+0xb8>)
 80009ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_ADC2_Init+0xb4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_ADC2_Init+0xb4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_ADC2_Init+0xb4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_ADC2_Init+0xb4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_ADC2_Init+0xb4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ADC2_Init+0xb4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_ADC2_Init+0xb4>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC2_Init+0xb4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_ADC2_Init+0xb4>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_ADC2_Init+0xb4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_ADC2_Init+0xb4>)
 8000a12:	2204      	movs	r2, #4
 8000a14:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_ADC2_Init+0xb4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_ADC2_Init+0xb4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a22:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_ADC2_Init+0xb4>)
 8000a24:	f000 fd0e 	bl	8001444 <HAL_ADC_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000a2e:	f000 fa5f 	bl	8000ef0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <MX_ADC2_Init+0xb4>)
 8000a50:	f001 fb34 	bl	80020bc <HAL_ADC_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000a5a:	f000 fa49 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200002a8 	.word	0x200002a8
 8000a6c:	50000100 	.word	0x50000100

08000a70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <MX_I2C1_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aac:	f002 f990 	bl	8002dd0 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 fa1b 	bl	8000ef0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000abe:	f002 fa16 	bl	8002eee <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fa12 	bl	8000ef0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000ad0:	f002 fa58 	bl	8002f84 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fa09 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200002f8 	.word	0x200002f8
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	2000090e 	.word	0x2000090e

08000af0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <MX_SPI1_Init+0x78>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b0a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b26:	2208      	movs	r2, #8
 8000b28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b3e:	2207      	movs	r2, #7
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b50:	f003 ff0a 	bl	8004968 <HAL_SPI_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 f9c9 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000034c 	.word	0x2000034c
 8000b68:	40013000 	.word	0x40013000

08000b6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b90:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_TIM3_Init+0xac>)
 8000b92:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <MX_TIM3_Init+0xb0>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <MX_TIM3_Init+0xac>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_TIM3_Init+0xac>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_TIM3_Init+0xac>)
 8000ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_TIM3_Init+0xac>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_TIM3_Init+0xac>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bb6:	4818      	ldr	r0, [pc, #96]	; (8000c18 <MX_TIM3_Init+0xac>)
 8000bb8:	f003 ff81 	bl	8004abe <HAL_TIM_PWM_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000bc2:	f000 f995 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4810      	ldr	r0, [pc, #64]	; (8000c18 <MX_TIM3_Init+0xac>)
 8000bd6:	f004 febb 	bl	8005950 <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000be0:	f000 f986 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be4:	2360      	movs	r3, #96	; 0x60
 8000be6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <MX_TIM3_Init+0xac>)
 8000bfc:	f004 f9d6 	bl	8004fac <HAL_TIM_PWM_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c06:	f000 f973 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c0a:	4803      	ldr	r0, [pc, #12]	; (8000c18 <MX_TIM3_Init+0xac>)
 8000c0c:	f000 fa90 	bl	8001130 <HAL_TIM_MspPostInit>

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200003b0 	.word	0x200003b0
 8000c1c:	40000400 	.word	0x40000400

08000c20 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <MX_USB_PCD_Init+0x3c>)
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <MX_USB_PCD_Init+0x40>)
 8000c28:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USB_PCD_Init+0x3c>)
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MX_USB_PCD_Init+0x3c>)
 8000c32:	2202      	movs	r2, #2
 8000c34:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USB_PCD_Init+0x3c>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <MX_USB_PCD_Init+0x3c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USB_PCD_Init+0x3c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_USB_PCD_Init+0x3c>)
 8000c4a:	f002 f9e7 	bl	800301c <HAL_PCD_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000c54:	f000 f94c 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200003fc 	.word	0x200003fc
 8000c60:	40005c00 	.word	0x40005c00

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c7a:	4b69      	ldr	r3, [pc, #420]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a68      	ldr	r2, [pc, #416]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000c80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b66      	ldr	r3, [pc, #408]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4b63      	ldr	r3, [pc, #396]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a62      	ldr	r2, [pc, #392]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b60      	ldr	r3, [pc, #384]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000caa:	4b5d      	ldr	r3, [pc, #372]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a5c      	ldr	r2, [pc, #368]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000cb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b5a      	ldr	r3, [pc, #360]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b57      	ldr	r3, [pc, #348]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	4a56      	ldr	r2, [pc, #344]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	6153      	str	r3, [r2, #20]
 8000cce:	4b54      	ldr	r3, [pc, #336]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4b51      	ldr	r3, [pc, #324]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a50      	ldr	r2, [pc, #320]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce4:	6153      	str	r3, [r2, #20]
 8000ce6:	4b4e      	ldr	r3, [pc, #312]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	4b4b      	ldr	r3, [pc, #300]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	4a4a      	ldr	r2, [pc, #296]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000cf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cfc:	6153      	str	r3, [r2, #20]
 8000cfe:	4b48      	ldr	r3, [pc, #288]	; (8000e20 <MX_GPIO_Init+0x1bc>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000d10:	4844      	ldr	r0, [pc, #272]	; (8000e24 <MX_GPIO_Init+0x1c0>)
 8000d12:	f002 f82d 	bl	8002d70 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d1c:	4842      	ldr	r0, [pc, #264]	; (8000e28 <MX_GPIO_Init+0x1c4>)
 8000d1e:	f002 f827 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d22:	2200      	movs	r2, #0
 8000d24:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8000d28:	4840      	ldr	r0, [pc, #256]	; (8000e2c <MX_GPIO_Init+0x1c8>)
 8000d2a:	f002 f821 	bl	8002d70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d2e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000d32:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4837      	ldr	r0, [pc, #220]	; (8000e24 <MX_GPIO_Init+0x1c0>)
 8000d48:	f001 fe80 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin;
 8000d4c:	2330      	movs	r3, #48	; 0x30
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d50:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4830      	ldr	r0, [pc, #192]	; (8000e24 <MX_GPIO_Init+0x1c0>)
 8000d62:	f001 fe73 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7c:	f001 fe66 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4823      	ldr	r0, [pc, #140]	; (8000e28 <MX_GPIO_Init+0x1c4>)
 8000d9a:	f001 fe57 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d9e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000da2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	481d      	ldr	r0, [pc, #116]	; (8000e2c <MX_GPIO_Init+0x1c8>)
 8000db8:	f001 fe48 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4816      	ldr	r0, [pc, #88]	; (8000e2c <MX_GPIO_Init+0x1c8>)
 8000dd2:	f001 fe3b 	bl	8002a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2105      	movs	r1, #5
 8000dda:	2006      	movs	r0, #6
 8000ddc:	f001 fdff 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000de0:	2006      	movs	r0, #6
 8000de2:	f001 fe18 	bl	8002a16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2105      	movs	r1, #5
 8000dea:	2007      	movs	r0, #7
 8000dec:	f001 fdf7 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000df0:	2007      	movs	r0, #7
 8000df2:	f001 fe10 	bl	8002a16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 5, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2105      	movs	r1, #5
 8000dfa:	2008      	movs	r0, #8
 8000dfc:	f001 fdef 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000e00:	2008      	movs	r0, #8
 8000e02:	f001 fe08 	bl	8002a16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2105      	movs	r1, #5
 8000e0a:	2009      	movs	r0, #9
 8000e0c:	f001 fde7 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e10:	2009      	movs	r0, #9
 8000e12:	f001 fe00 	bl	8002a16 <HAL_NVIC_EnableIRQ>

}
 8000e16:	bf00      	nop
 8000e18:	3730      	adds	r7, #48	; 0x30
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48001000 	.word	0x48001000
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	48000c00 	.word	0x48000c00

08000e30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <StartDefaultTask+0xa0>)
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 ff96 	bl	8002d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <StartDefaultTask+0xa0>)
 8000e46:	2120      	movs	r1, #32
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 ff90 	bl	8002d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <StartDefaultTask+0xa0>)
 8000e52:	2140      	movs	r1, #64	; 0x40
 8000e54:	2201      	movs	r2, #1
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 ff8a 	bl	8002d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <StartDefaultTask+0xa0>)
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	2201      	movs	r2, #1
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 ff84 	bl	8002d70 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f004 feb6 	bl	8005bda <osDelay>

    uint32_t now = HAL_GetTick();
 8000e6e:	f000 fac9 	bl	8001404 <HAL_GetTick>
 8000e72:	60f8      	str	r0, [r7, #12]
    if (lm35_active == 1 && temp >= temp_tresh) {
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <StartDefaultTask+0xa4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d10b      	bne.n	8000e94 <StartDefaultTask+0x64>
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <StartDefaultTask+0xa8>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <StartDefaultTask+0xac>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d305      	bcc.n	8000e94 <StartDefaultTask+0x64>
    	playTone();
 8000e88:	f7ff fc84 	bl	8000794 <playTone>
    	print("   Sirjani   ");
 8000e8c:	4814      	ldr	r0, [pc, #80]	; (8000ee0 <StartDefaultTask+0xb0>)
 8000e8e:	f7ff f9a7 	bl	80001e0 <print>
 8000e92:	e00d      	b.n	8000eb0 <StartDefaultTask+0x80>
    } else if (playing) {
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <StartDefaultTask+0xb4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d009      	beq.n	8000eb0 <StartDefaultTask+0x80>
    	buzzerChangeTone(0, 0);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fbba 	bl	8000618 <buzzerChangeTone>
    	playing = 0;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <StartDefaultTask+0xb4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
    	period_start = now;
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <StartDefaultTask+0xb8>)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6013      	str	r3, [r2, #0]
    }

    if(menu == 1){
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <StartDefaultTask+0xbc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d0d7      	beq.n	8000e68 <StartDefaultTask+0x38>
    	// LM35 control
    } else if(menu == 2){
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <StartDefaultTask+0xbc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d0d3      	beq.n	8000e68 <StartDefaultTask+0x38>
    	// PIR control
    } else if(menu == 3){
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <StartDefaultTask+0xbc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d0cf      	beq.n	8000e68 <StartDefaultTask+0x38>
    	// LED control
    } else if(menu == 4){
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <StartDefaultTask+0xbc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b04      	cmp	r3, #4
  {
 8000ece:	e7cb      	b.n	8000e68 <StartDefaultTask+0x38>
 8000ed0:	48000c00 	.word	0x48000c00
 8000ed4:	20000004 	.word	0x20000004
 8000ed8:	200007fc 	.word	0x200007fc
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	08007054 	.word	0x08007054
 8000ee4:	200006f4 	.word	0x200006f4
 8000ee8:	200006f8 	.word	0x200006f8
 8000eec:	20000804 	.word	0x20000804

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <Error_Handler+0x8>
	...

08000efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6193      	str	r3, [r2, #24]
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	61d3      	str	r3, [r2, #28]
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	210f      	movs	r1, #15
 8000f36:	f06f 0001 	mvn.w	r0, #1
 8000f3a:	f001 fd50 	bl	80029de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <HAL_ADC_MspInit+0x84>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d12c      	bne.n	8000fc8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_ADC_MspInit+0x88>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_ADC_MspInit+0x88>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	6153      	str	r3, [r2, #20]
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_ADC_MspInit+0x88>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_ADC_MspInit+0x88>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <HAL_ADC_MspInit+0x88>)
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	6153      	str	r3, [r2, #20]
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_ADC_MspInit+0x88>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f001 fd4a 	bl	8002a4c <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2105      	movs	r1, #5
 8000fbc:	2012      	movs	r0, #18
 8000fbe:	f001 fd0e 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fc2:	2012      	movs	r0, #18
 8000fc4:	f001 fd27 	bl	8002a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	50000100 	.word	0x50000100
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_I2C_MspInit+0x7c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d127      	bne.n	800104a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_I2C_MspInit+0x80>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a16      	ldr	r2, [pc, #88]	; (8001058 <HAL_I2C_MspInit+0x80>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_I2C_MspInit+0x80>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001012:	23c0      	movs	r3, #192	; 0xc0
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001016:	2312      	movs	r3, #18
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101a:	2301      	movs	r3, #1
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001022:	2304      	movs	r3, #4
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <HAL_I2C_MspInit+0x84>)
 800102e:	f001 fd0d 	bl	8002a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_I2C_MspInit+0x80>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_I2C_MspInit+0x80>)
 8001038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_I2C_MspInit+0x80>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40005400 	.word	0x40005400
 8001058:	40021000 	.word	0x40021000
 800105c:	48000400 	.word	0x48000400

08001060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <HAL_SPI_MspInit+0x7c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d128      	bne.n	80010d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_SPI_MspInit+0x80>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <HAL_SPI_MspInit+0x80>)
 8001088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_SPI_MspInit+0x80>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_SPI_MspInit+0x80>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_SPI_MspInit+0x80>)
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_SPI_MspInit+0x80>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010b2:	23e0      	movs	r3, #224	; 0xe0
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010c2:	2305      	movs	r3, #5
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d0:	f001 fcbc 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013000 	.word	0x40013000
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_TIM_PWM_MspInit+0x44>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d113      	bne.n	800111e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_TIM_PWM_MspInit+0x48>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a0c      	ldr	r2, [pc, #48]	; (800112c <HAL_TIM_PWM_MspInit+0x48>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_TIM_PWM_MspInit+0x48>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2105      	movs	r1, #5
 8001112:	201d      	movs	r0, #29
 8001114:	f001 fc63 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001118:	201d      	movs	r0, #29
 800111a:	f001 fc7c 	bl	8002a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40000400 	.word	0x40000400
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_TIM_MspPostInit+0x64>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d11b      	bne.n	800118a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_TIM_MspPostInit+0x68>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <HAL_TIM_MspPostInit+0x68>)
 8001158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800115c:	6153      	str	r3, [r2, #20]
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_TIM_MspPostInit+0x68>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE2     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800116a:	2304      	movs	r3, #4
 800116c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800117a:	2302      	movs	r3, #2
 800117c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_TIM_MspPostInit+0x6c>)
 8001186:	f001 fc61 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40000400 	.word	0x40000400
 8001198:	40021000 	.word	0x40021000
 800119c:	48001000 	.word	0x48001000

080011a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a18      	ldr	r2, [pc, #96]	; (8001220 <HAL_PCD_MspInit+0x80>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d129      	bne.n	8001216 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_PCD_MspInit+0x84>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_PCD_MspInit+0x84>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	6153      	str	r3, [r2, #20]
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_PCD_MspInit+0x84>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80011da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011ec:	230e      	movs	r3, #14
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f001 fc27 	bl	8002a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_PCD_MspInit+0x84>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_PCD_MspInit+0x84>)
 8001204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_PCD_MspInit+0x84>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40005c00 	.word	0x40005c00
 8001224:	40021000 	.word	0x40021000

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
//  while (1)
//  {
//    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
//    /* USER CODE END W1_HardFault_IRQn 0 */
//  }
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001260:	f000 f8bc 	bl	80013dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001264:	f005 fa40 	bl	80066e8 <xTaskGetSchedulerState>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d001      	beq.n	8001272 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800126e:	f005 fc7b 	bl	8006b68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}

08001276 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800127a:	2001      	movs	r0, #1
 800127c:	f001 fd90 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001288:	2002      	movs	r0, #2
 800128a:	f001 fd89 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}

08001292 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001296:	2004      	movs	r0, #4
 8001298:	f001 fd82 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80012a4:	2008      	movs	r0, #8
 80012a6:	f001 fd7b 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <ADC1_2_IRQHandler+0x10>)
 80012b6:	f000 fbf3 	bl	8001aa0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002a8 	.word	0x200002a8

080012c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <TIM3_IRQHandler+0x10>)
 80012ca:	f003 fd4f 	bl	8004d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200003b0 	.word	0x200003b0

080012d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <SystemInit+0x20>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <SystemInit+0x20>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001334 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001300:	f7ff ffea 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopForever+0x6>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopForever+0xe>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopForever+0x16>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132a:	f005 fe47 	bl	8006fbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800132e:	f7ff faab 	bl	8000888 <main>

08001332 <LoopForever>:

LoopForever:
    b LoopForever
 8001332:	e7fe      	b.n	8001332 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001334:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001340:	080070d4 	.word	0x080070d4
  ldr r2, =_sbss
 8001344:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001348:	2000155c 	.word	0x2000155c

0800134c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC3_IRQHandler>
	...

08001350 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x28>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f001 fb31 	bl	80029c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	200f      	movs	r0, #15
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fdc6 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000

0800137c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fb49 	bl	8002a32 <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f001 fb11 	bl	80029de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000010 	.word	0x20000010
 80013d8:	2000000c 	.word	0x2000000c

080013dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000010 	.word	0x20000010
 8001400:	2000080c 	.word	0x2000080c

08001404 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;  
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000080c 	.word	0x2000080c

0800141c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b09a      	sub	sp, #104	; 0x68
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e1c9      	b.n	80017f8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	2b00      	cmp	r3, #0
 8001474:	d176      	bne.n	8001564 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	2b00      	cmp	r3, #0
 800147c:	d152      	bne.n	8001524 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fd57 	bl	8000f4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d13b      	bne.n	8001524 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f001 f955 	bl	800275c <ADC_Disable>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d12f      	bne.n	8001524 <HAL_ADC_Init+0xe0>
 80014c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d12b      	bne.n	8001524 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014d4:	f023 0302 	bic.w	r3, r3, #2
 80014d8:	f043 0202 	orr.w	r2, r3, #2
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001500:	4b86      	ldr	r3, [pc, #536]	; (800171c <HAL_ADC_Init+0x2d8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a86      	ldr	r2, [pc, #536]	; (8001720 <HAL_ADC_Init+0x2dc>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0c9a      	lsrs	r2, r3, #18
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001516:	e002      	b.n	800151e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	3b01      	subs	r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f9      	bne.n	8001518 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800153c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001540:	d110      	bne.n	8001564 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f023 0312 	bic.w	r3, r3, #18
 800154a:	f043 0210 	orr.w	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f043 0201 	orr.w	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	2b00      	cmp	r3, #0
 800156e:	f040 8136 	bne.w	80017de <HAL_ADC_Init+0x39a>
 8001572:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 8131 	bne.w	80017de <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 8129 	bne.w	80017de <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001594:	f043 0202 	orr.w	r2, r3, #2
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a4:	d004      	beq.n	80015b0 <HAL_ADC_Init+0x16c>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a5e      	ldr	r2, [pc, #376]	; (8001724 <HAL_ADC_Init+0x2e0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_Init+0x170>
 80015b0:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <HAL_ADC_Init+0x2e4>)
 80015b2:	e000      	b.n	80015b6 <HAL_ADC_Init+0x172>
 80015b4:	4b5d      	ldr	r3, [pc, #372]	; (800172c <HAL_ADC_Init+0x2e8>)
 80015b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c0:	d102      	bne.n	80015c8 <HAL_ADC_Init+0x184>
 80015c2:	4b58      	ldr	r3, [pc, #352]	; (8001724 <HAL_ADC_Init+0x2e0>)
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e01a      	b.n	80015fe <HAL_ADC_Init+0x1ba>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a55      	ldr	r2, [pc, #340]	; (8001724 <HAL_ADC_Init+0x2e0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d103      	bne.n	80015da <HAL_ADC_Init+0x196>
 80015d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e011      	b.n	80015fe <HAL_ADC_Init+0x1ba>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a54      	ldr	r2, [pc, #336]	; (8001730 <HAL_ADC_Init+0x2ec>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d102      	bne.n	80015ea <HAL_ADC_Init+0x1a6>
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_ADC_Init+0x2f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e009      	b.n	80015fe <HAL_ADC_Init+0x1ba>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a51      	ldr	r2, [pc, #324]	; (8001734 <HAL_ADC_Init+0x2f0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d102      	bne.n	80015fa <HAL_ADC_Init+0x1b6>
 80015f4:	4b4e      	ldr	r3, [pc, #312]	; (8001730 <HAL_ADC_Init+0x2ec>)
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e001      	b.n	80015fe <HAL_ADC_Init+0x1ba>
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <HAL_ADC_Init+0x1da>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_ADC_Init+0x1da>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_ADC_Init+0x1dc>
 800161e:	2300      	movs	r3, #0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d11c      	bne.n	800165e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001624:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001626:	2b00      	cmp	r3, #0
 8001628:	d010      	beq.n	800164c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_ADC_Init+0x202>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Init+0x202>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_ADC_Init+0x204>
 8001646:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001648:	2b00      	cmp	r3, #0
 800164a:	d108      	bne.n	800165e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800164c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	431a      	orrs	r2, r3
 800165a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800165c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7e5b      	ldrb	r3, [r3, #25]
 8001662:	035b      	lsls	r3, r3, #13
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001668:	2a01      	cmp	r2, #1
 800166a:	d002      	beq.n	8001672 <HAL_ADC_Init+0x22e>
 800166c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001670:	e000      	b.n	8001674 <HAL_ADC_Init+0x230>
 8001672:	2200      	movs	r2, #0
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4313      	orrs	r3, r2
 8001682:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001684:	4313      	orrs	r3, r2
 8001686:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d11b      	bne.n	80016ca <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7e5b      	ldrb	r3, [r3, #25]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	3b01      	subs	r3, #1
 80016a0:	045a      	lsls	r2, r3, #17
 80016a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016a4:	4313      	orrs	r3, r2
 80016a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016aa:	663b      	str	r3, [r7, #96]	; 0x60
 80016ac:	e00d      	b.n	80016ca <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80016b6:	f043 0220 	orr.w	r2, r3, #32
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d03a      	beq.n	8001748 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a16      	ldr	r2, [pc, #88]	; (8001730 <HAL_ADC_Init+0x2ec>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d004      	beq.n	80016e6 <HAL_ADC_Init+0x2a2>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <HAL_ADC_Init+0x2f0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d128      	bne.n	8001738 <HAL_ADC_Init+0x2f4>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80016ee:	d012      	beq.n	8001716 <HAL_ADC_Init+0x2d2>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f8:	d00a      	beq.n	8001710 <HAL_ADC_Init+0x2cc>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001702:	d002      	beq.n	800170a <HAL_ADC_Init+0x2c6>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	e018      	b.n	800173c <HAL_ADC_Init+0x2f8>
 800170a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170e:	e015      	b.n	800173c <HAL_ADC_Init+0x2f8>
 8001710:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001714:	e012      	b.n	800173c <HAL_ADC_Init+0x2f8>
 8001716:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800171a:	e00f      	b.n	800173c <HAL_ADC_Init+0x2f8>
 800171c:	20000008 	.word	0x20000008
 8001720:	431bde83 	.word	0x431bde83
 8001724:	50000100 	.word	0x50000100
 8001728:	50000300 	.word	0x50000300
 800172c:	50000700 	.word	0x50000700
 8001730:	50000400 	.word	0x50000400
 8001734:	50000500 	.word	0x50000500
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001740:	4313      	orrs	r3, r2
 8001742:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001744:	4313      	orrs	r3, r2
 8001746:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	d114      	bne.n	8001780 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001764:	f023 0302 	bic.w	r3, r3, #2
 8001768:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7e1b      	ldrb	r3, [r3, #24]
 800176e:	039a      	lsls	r2, r3, #14
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4313      	orrs	r3, r2
 800177a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800177c:	4313      	orrs	r3, r2
 800177e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_ADC_Init+0x3bc>)
 8001788:	4013      	ands	r3, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001790:	430b      	orrs	r3, r1
 8001792:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10c      	bne.n	80017b6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f023 010f 	bic.w	r1, r3, #15
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	1e5a      	subs	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
 80017b4:	e007      	b.n	80017c6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 020f 	bic.w	r2, r2, #15
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f023 0303 	bic.w	r3, r3, #3
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
 80017dc:	e00a      	b.n	80017f4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f023 0312 	bic.w	r3, r3, #18
 80017e6:	f043 0210 	orr.w	r2, r3, #16
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80017ee:	2301      	movs	r3, #1
 80017f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80017f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3768      	adds	r7, #104	; 0x68
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	fff0c007 	.word	0xfff0c007

08001804 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 8123 	bne.w	8001a66 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <HAL_ADC_Start_IT+0x2a>
 800182a:	2302      	movs	r3, #2
 800182c:	e11e      	b.n	8001a6c <HAL_ADC_Start_IT+0x268>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 ff2c 	bl	8002694 <ADC_Enable>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 810a 	bne.w	8001a5c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001864:	d004      	beq.n	8001870 <HAL_ADC_Start_IT+0x6c>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a82      	ldr	r2, [pc, #520]	; (8001a74 <HAL_ADC_Start_IT+0x270>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d106      	bne.n	800187e <HAL_ADC_Start_IT+0x7a>
 8001870:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <HAL_ADC_Start_IT+0x274>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	2b00      	cmp	r3, #0
 800187a:	d010      	beq.n	800189e <HAL_ADC_Start_IT+0x9a>
 800187c:	e005      	b.n	800188a <HAL_ADC_Start_IT+0x86>
 800187e:	4b7f      	ldr	r3, [pc, #508]	; (8001a7c <HAL_ADC_Start_IT+0x278>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_ADC_Start_IT+0x9a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001892:	d004      	beq.n	800189e <HAL_ADC_Start_IT+0x9a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a79      	ldr	r2, [pc, #484]	; (8001a80 <HAL_ADC_Start_IT+0x27c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d115      	bne.n	80018ca <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d036      	beq.n	8001926 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018c8:	e02d      	b.n	8001926 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018de:	d004      	beq.n	80018ea <HAL_ADC_Start_IT+0xe6>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a63      	ldr	r2, [pc, #396]	; (8001a74 <HAL_ADC_Start_IT+0x270>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d10a      	bne.n	8001900 <HAL_ADC_Start_IT+0xfc>
 80018ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf14      	ite	ne
 80018f8:	2301      	movne	r3, #1
 80018fa:	2300      	moveq	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	e008      	b.n	8001912 <HAL_ADC_Start_IT+0x10e>
 8001900:	4b5f      	ldr	r3, [pc, #380]	; (8001a80 <HAL_ADC_Start_IT+0x27c>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf14      	ite	ne
 800190c:	2301      	movne	r3, #1
 800190e:	2300      	moveq	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800191e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001932:	d106      	bne.n	8001942 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f023 0206 	bic.w	r2, r3, #6
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
 8001940:	e002      	b.n	8001948 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	221c      	movs	r2, #28
 8001956:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	2b08      	cmp	r3, #8
 800195e:	d110      	bne.n	8001982 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0204 	bic.w	r2, r2, #4
 800196e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0208 	orr.w	r2, r2, #8
 800197e:	605a      	str	r2, [r3, #4]
          break;
 8001980:	e008      	b.n	8001994 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 020c 	orr.w	r2, r2, #12
 8001990:	605a      	str	r2, [r3, #4]
          break;
 8001992:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001998:	2b01      	cmp	r3, #1
 800199a:	d107      	bne.n	80019ac <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0210 	bic.w	r2, r2, #16
 80019aa:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019b4:	d004      	beq.n	80019c0 <HAL_ADC_Start_IT+0x1bc>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2e      	ldr	r2, [pc, #184]	; (8001a74 <HAL_ADC_Start_IT+0x270>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d106      	bne.n	80019ce <HAL_ADC_Start_IT+0x1ca>
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_ADC_Start_IT+0x274>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d03e      	beq.n	8001a4a <HAL_ADC_Start_IT+0x246>
 80019cc:	e005      	b.n	80019da <HAL_ADC_Start_IT+0x1d6>
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_ADC_Start_IT+0x278>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d037      	beq.n	8001a4a <HAL_ADC_Start_IT+0x246>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e2:	d004      	beq.n	80019ee <HAL_ADC_Start_IT+0x1ea>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a22      	ldr	r2, [pc, #136]	; (8001a74 <HAL_ADC_Start_IT+0x270>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d106      	bne.n	80019fc <HAL_ADC_Start_IT+0x1f8>
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_ADC_Start_IT+0x274>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d027      	beq.n	8001a4a <HAL_ADC_Start_IT+0x246>
 80019fa:	e005      	b.n	8001a08 <HAL_ADC_Start_IT+0x204>
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <HAL_ADC_Start_IT+0x278>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d020      	beq.n	8001a4a <HAL_ADC_Start_IT+0x246>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a10:	d004      	beq.n	8001a1c <HAL_ADC_Start_IT+0x218>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_ADC_Start_IT+0x270>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d106      	bne.n	8001a2a <HAL_ADC_Start_IT+0x226>
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_ADC_Start_IT+0x274>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	d010      	beq.n	8001a4a <HAL_ADC_Start_IT+0x246>
 8001a28:	e005      	b.n	8001a36 <HAL_ADC_Start_IT+0x232>
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_ADC_Start_IT+0x278>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	2b09      	cmp	r3, #9
 8001a34:	d009      	beq.n	8001a4a <HAL_ADC_Start_IT+0x246>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a3e:	d004      	beq.n	8001a4a <HAL_ADC_Start_IT+0x246>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <HAL_ADC_Start_IT+0x27c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10f      	bne.n	8001a6a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0204 	orr.w	r2, r2, #4
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	e006      	b.n	8001a6a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a64:	e001      	b.n	8001a6a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a66:	2302      	movs	r3, #2
 8001a68:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	50000100 	.word	0x50000100
 8001a78:	50000300 	.word	0x50000300
 8001a7c:	50000700 	.word	0x50000700
 8001a80:	50000400 	.word	0x50000400

08001a84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <HAL_ADC_IRQHandler+0x38>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10b      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80bc 	beq.w	8001c5c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 80b6 	beq.w	8001c5c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b10:	d004      	beq.n	8001b1c <HAL_ADC_IRQHandler+0x7c>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a90      	ldr	r2, [pc, #576]	; (8001d58 <HAL_ADC_IRQHandler+0x2b8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d106      	bne.n	8001b2a <HAL_ADC_IRQHandler+0x8a>
 8001b1c:	4b8f      	ldr	r3, [pc, #572]	; (8001d5c <HAL_ADC_IRQHandler+0x2bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d03e      	beq.n	8001ba6 <HAL_ADC_IRQHandler+0x106>
 8001b28:	e005      	b.n	8001b36 <HAL_ADC_IRQHandler+0x96>
 8001b2a:	4b8d      	ldr	r3, [pc, #564]	; (8001d60 <HAL_ADC_IRQHandler+0x2c0>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d037      	beq.n	8001ba6 <HAL_ADC_IRQHandler+0x106>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b3e:	d004      	beq.n	8001b4a <HAL_ADC_IRQHandler+0xaa>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a84      	ldr	r2, [pc, #528]	; (8001d58 <HAL_ADC_IRQHandler+0x2b8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d106      	bne.n	8001b58 <HAL_ADC_IRQHandler+0xb8>
 8001b4a:	4b84      	ldr	r3, [pc, #528]	; (8001d5c <HAL_ADC_IRQHandler+0x2bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d027      	beq.n	8001ba6 <HAL_ADC_IRQHandler+0x106>
 8001b56:	e005      	b.n	8001b64 <HAL_ADC_IRQHandler+0xc4>
 8001b58:	4b81      	ldr	r3, [pc, #516]	; (8001d60 <HAL_ADC_IRQHandler+0x2c0>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d020      	beq.n	8001ba6 <HAL_ADC_IRQHandler+0x106>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b6c:	d004      	beq.n	8001b78 <HAL_ADC_IRQHandler+0xd8>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a79      	ldr	r2, [pc, #484]	; (8001d58 <HAL_ADC_IRQHandler+0x2b8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d106      	bne.n	8001b86 <HAL_ADC_IRQHandler+0xe6>
 8001b78:	4b78      	ldr	r3, [pc, #480]	; (8001d5c <HAL_ADC_IRQHandler+0x2bc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	d010      	beq.n	8001ba6 <HAL_ADC_IRQHandler+0x106>
 8001b84:	e005      	b.n	8001b92 <HAL_ADC_IRQHandler+0xf2>
 8001b86:	4b76      	ldr	r3, [pc, #472]	; (8001d60 <HAL_ADC_IRQHandler+0x2c0>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 031f 	and.w	r3, r3, #31
 8001b8e:	2b09      	cmp	r3, #9
 8001b90:	d009      	beq.n	8001ba6 <HAL_ADC_IRQHandler+0x106>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_IRQHandler+0x106>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a70      	ldr	r2, [pc, #448]	; (8001d64 <HAL_ADC_IRQHandler+0x2c4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d104      	bne.n	8001bb0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	e00f      	b.n	8001bd0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bb8:	d004      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x124>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a66      	ldr	r2, [pc, #408]	; (8001d58 <HAL_ADC_IRQHandler+0x2b8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d102      	bne.n	8001bca <HAL_ADC_IRQHandler+0x12a>
 8001bc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bc8:	e000      	b.n	8001bcc <HAL_ADC_IRQHandler+0x12c>
 8001bca:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <HAL_ADC_IRQHandler+0x2c4>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d137      	bne.n	8001c4e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d132      	bne.n	8001c4e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d02d      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d11a      	bne.n	8001c36 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 020c 	bic.w	r2, r2, #12
 8001c0e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d112      	bne.n	8001c4e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
 8001c34:	e00b      	b.n	8001c4e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f043 0210 	orr.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe fdd4 	bl	80007fc <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	220c      	movs	r2, #12
 8001c5a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x1d0>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8138 	beq.w	8001eec <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8132 	beq.w	8001eec <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c9c:	d004      	beq.n	8001ca8 <HAL_ADC_IRQHandler+0x208>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <HAL_ADC_IRQHandler+0x2b8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d106      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0x216>
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <HAL_ADC_IRQHandler+0x2bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d03e      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x292>
 8001cb4:	e005      	b.n	8001cc2 <HAL_ADC_IRQHandler+0x222>
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_ADC_IRQHandler+0x2c0>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d037      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x292>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cca:	d004      	beq.n	8001cd6 <HAL_ADC_IRQHandler+0x236>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a21      	ldr	r2, [pc, #132]	; (8001d58 <HAL_ADC_IRQHandler+0x2b8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d106      	bne.n	8001ce4 <HAL_ADC_IRQHandler+0x244>
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_ADC_IRQHandler+0x2bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d027      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x292>
 8001ce2:	e005      	b.n	8001cf0 <HAL_ADC_IRQHandler+0x250>
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_ADC_IRQHandler+0x2c0>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d020      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x292>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf8:	d004      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x264>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_ADC_IRQHandler+0x2b8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d106      	bne.n	8001d12 <HAL_ADC_IRQHandler+0x272>
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_ADC_IRQHandler+0x2bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d010      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x292>
 8001d10:	e005      	b.n	8001d1e <HAL_ADC_IRQHandler+0x27e>
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_ADC_IRQHandler+0x2c0>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2b09      	cmp	r3, #9
 8001d1c:	d009      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x292>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d26:	d004      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x292>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <HAL_ADC_IRQHandler+0x2c4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d104      	bne.n	8001d3c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	e018      	b.n	8001d6e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d44:	d004      	beq.n	8001d50 <HAL_ADC_IRQHandler+0x2b0>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <HAL_ADC_IRQHandler+0x2b8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d10b      	bne.n	8001d68 <HAL_ADC_IRQHandler+0x2c8>
 8001d50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d54:	e009      	b.n	8001d6a <HAL_ADC_IRQHandler+0x2ca>
 8001d56:	bf00      	nop
 8001d58:	50000100 	.word	0x50000100
 8001d5c:	50000300 	.word	0x50000300
 8001d60:	50000700 	.word	0x50000700
 8001d64:	50000400 	.word	0x50000400
 8001d68:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <HAL_ADC_IRQHandler+0x514>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 80b0 	bne.w	8001ede <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00d      	beq.n	8001da4 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f040 80a3 	bne.w	8001ede <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 809d 	bne.w	8001ede <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8097 	beq.w	8001ede <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db8:	d004      	beq.n	8001dc4 <HAL_ADC_IRQHandler+0x324>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7e      	ldr	r2, [pc, #504]	; (8001fb8 <HAL_ADC_IRQHandler+0x518>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d106      	bne.n	8001dd2 <HAL_ADC_IRQHandler+0x332>
 8001dc4:	4b7d      	ldr	r3, [pc, #500]	; (8001fbc <HAL_ADC_IRQHandler+0x51c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d03e      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x3ae>
 8001dd0:	e005      	b.n	8001dde <HAL_ADC_IRQHandler+0x33e>
 8001dd2:	4b7b      	ldr	r3, [pc, #492]	; (8001fc0 <HAL_ADC_IRQHandler+0x520>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d037      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x3ae>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de6:	d004      	beq.n	8001df2 <HAL_ADC_IRQHandler+0x352>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a72      	ldr	r2, [pc, #456]	; (8001fb8 <HAL_ADC_IRQHandler+0x518>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d106      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x360>
 8001df2:	4b72      	ldr	r3, [pc, #456]	; (8001fbc <HAL_ADC_IRQHandler+0x51c>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d027      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x3ae>
 8001dfe:	e005      	b.n	8001e0c <HAL_ADC_IRQHandler+0x36c>
 8001e00:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_ADC_IRQHandler+0x520>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	2b06      	cmp	r3, #6
 8001e0a:	d020      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x3ae>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e14:	d004      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x380>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a67      	ldr	r2, [pc, #412]	; (8001fb8 <HAL_ADC_IRQHandler+0x518>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d106      	bne.n	8001e2e <HAL_ADC_IRQHandler+0x38e>
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_ADC_IRQHandler+0x51c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	2b07      	cmp	r3, #7
 8001e2a:	d010      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x3ae>
 8001e2c:	e005      	b.n	8001e3a <HAL_ADC_IRQHandler+0x39a>
 8001e2e:	4b64      	ldr	r3, [pc, #400]	; (8001fc0 <HAL_ADC_IRQHandler+0x520>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	2b07      	cmp	r3, #7
 8001e38:	d009      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x3ae>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e42:	d004      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x3ae>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a5a      	ldr	r2, [pc, #360]	; (8001fb4 <HAL_ADC_IRQHandler+0x514>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d104      	bne.n	8001e58 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	e00f      	b.n	8001e78 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e60:	d004      	beq.n	8001e6c <HAL_ADC_IRQHandler+0x3cc>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a54      	ldr	r2, [pc, #336]	; (8001fb8 <HAL_ADC_IRQHandler+0x518>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d102      	bne.n	8001e72 <HAL_ADC_IRQHandler+0x3d2>
 8001e6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e70:	e000      	b.n	8001e74 <HAL_ADC_IRQHandler+0x3d4>
 8001e72:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_ADC_IRQHandler+0x514>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d12d      	bne.n	8001ede <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d11a      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e9e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d112      	bne.n	8001ede <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ec4:	e00b      	b.n	8001ede <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f043 0210 	orr.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8c4 	bl	800206c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2260      	movs	r2, #96	; 0x60
 8001eea:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d011      	beq.n	8001f1a <HAL_ADC_IRQHandler+0x47a>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00c      	beq.n	8001f1a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fa85 	bl	800141c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d012      	beq.n	8001f4a <HAL_ADC_IRQHandler+0x4aa>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00d      	beq.n	8001f4a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8aa 	bl	8002094 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f48:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x4da>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00d      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f89c 	bl	80020a8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f78:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d04f      	beq.n	8002024 <HAL_ADC_IRQHandler+0x584>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d04a      	beq.n	8002024 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d102      	bne.n	8001f9c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e02d      	b.n	8001ff8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa4:	d004      	beq.n	8001fb0 <HAL_ADC_IRQHandler+0x510>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <HAL_ADC_IRQHandler+0x518>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d109      	bne.n	8001fc4 <HAL_ADC_IRQHandler+0x524>
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <HAL_ADC_IRQHandler+0x51c>)
 8001fb2:	e008      	b.n	8001fc6 <HAL_ADC_IRQHandler+0x526>
 8001fb4:	50000400 	.word	0x50000400
 8001fb8:	50000100 	.word	0x50000100
 8001fbc:	50000300 	.word	0x50000300
 8001fc0:	50000700 	.word	0x50000700
 8001fc4:	4b28      	ldr	r3, [pc, #160]	; (8002068 <HAL_ADC_IRQHandler+0x5c8>)
 8001fc6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e007      	b.n	8001ff8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d10e      	bne.n	800201c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f043 0202 	orr.w	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fa0a 	bl	8001430 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2210      	movs	r2, #16
 8002022:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202a:	2b00      	cmp	r3, #0
 800202c:	d018      	beq.n	8002060 <HAL_ADC_IRQHandler+0x5c0>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	f043 0208 	orr.w	r2, r3, #8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002058:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f810 	bl	8002080 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002060:	bf00      	nop
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	50000700 	.word	0x50000700

0800206c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020bc:	b480      	push	{r7}
 80020be:	b09b      	sub	sp, #108	; 0x6c
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x22>
 80020da:	2302      	movs	r3, #2
 80020dc:	e2ca      	b.n	8002674 <HAL_ADC_ConfigChannel+0x5b8>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 82ae 	bne.w	8002652 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d81c      	bhi.n	8002138 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	461a      	mov	r2, r3
 8002112:	231f      	movs	r3, #31
 8002114:	4093      	lsls	r3, r2
 8002116:	43db      	mvns	r3, r3
 8002118:	4019      	ands	r1, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa00 f203 	lsl.w	r2, r0, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
 8002136:	e063      	b.n	8002200 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b09      	cmp	r3, #9
 800213e:	d81e      	bhi.n	800217e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	3b1e      	subs	r3, #30
 8002154:	221f      	movs	r2, #31
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	4019      	ands	r1, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	3b1e      	subs	r3, #30
 8002170:	fa00 f203 	lsl.w	r2, r0, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	635a      	str	r2, [r3, #52]	; 0x34
 800217c:	e040      	b.n	8002200 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b0e      	cmp	r3, #14
 8002184:	d81e      	bhi.n	80021c4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	3b3c      	subs	r3, #60	; 0x3c
 800219a:	221f      	movs	r2, #31
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4019      	ands	r1, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	3b3c      	subs	r3, #60	; 0x3c
 80021b6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	639a      	str	r2, [r3, #56]	; 0x38
 80021c2:	e01d      	b.n	8002200 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	3b5a      	subs	r3, #90	; 0x5a
 80021d8:	221f      	movs	r2, #31
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	4019      	ands	r1, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	3b5a      	subs	r3, #90	; 0x5a
 80021f4:	fa00 f203 	lsl.w	r2, r0, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b00      	cmp	r3, #0
 800220c:	f040 80e5 	bne.w	80023da <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b09      	cmp	r3, #9
 8002216:	d91c      	bls.n	8002252 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6999      	ldr	r1, [r3, #24]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	3b1e      	subs	r3, #30
 800222a:	2207      	movs	r2, #7
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	4019      	ands	r1, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6898      	ldr	r0, [r3, #8]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	3b1e      	subs	r3, #30
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	619a      	str	r2, [r3, #24]
 8002250:	e019      	b.n	8002286 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6959      	ldr	r1, [r3, #20]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	2207      	movs	r2, #7
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	4019      	ands	r1, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6898      	ldr	r0, [r3, #8]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	fa00 f203 	lsl.w	r2, r0, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	08db      	lsrs	r3, r3, #3
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d84f      	bhi.n	8002348 <HAL_ADC_ConfigChannel+0x28c>
 80022a8:	a201      	add	r2, pc, #4	; (adr r2, 80022b0 <HAL_ADC_ConfigChannel+0x1f4>)
 80022aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ae:	bf00      	nop
 80022b0:	080022c1 	.word	0x080022c1
 80022b4:	080022e3 	.word	0x080022e3
 80022b8:	08002305 	.word	0x08002305
 80022bc:	08002327 	.word	0x08002327
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022c6:	4b9a      	ldr	r3, [pc, #616]	; (8002530 <HAL_ADC_ConfigChannel+0x474>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	0691      	lsls	r1, r2, #26
 80022d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022d2:	430a      	orrs	r2, r1
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022de:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022e0:	e07e      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022e8:	4b91      	ldr	r3, [pc, #580]	; (8002530 <HAL_ADC_ConfigChannel+0x474>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	0691      	lsls	r1, r2, #26
 80022f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022f4:	430a      	orrs	r2, r1
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002300:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002302:	e06d      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800230a:	4b89      	ldr	r3, [pc, #548]	; (8002530 <HAL_ADC_ConfigChannel+0x474>)
 800230c:	4013      	ands	r3, r2
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	0691      	lsls	r1, r2, #26
 8002314:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002316:	430a      	orrs	r2, r1
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002322:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002324:	e05c      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800232c:	4b80      	ldr	r3, [pc, #512]	; (8002530 <HAL_ADC_ConfigChannel+0x474>)
 800232e:	4013      	ands	r3, r2
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	0691      	lsls	r1, r2, #26
 8002336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002338:	430a      	orrs	r2, r1
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002344:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002346:	e04b      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	429a      	cmp	r2, r3
 800235a:	d107      	bne.n	800236c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800236a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	069b      	lsls	r3, r3, #26
 800237c:	429a      	cmp	r2, r3
 800237e:	d107      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800238e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	069b      	lsls	r3, r3, #26
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023b2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d10a      	bne.n	80023de <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023d6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80023d8:	e001      	b.n	80023de <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80023de:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d108      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x344>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x344>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_ADC_ConfigChannel+0x346>
 8002400:	2300      	movs	r3, #0
 8002402:	2b00      	cmp	r3, #0
 8002404:	f040 8130 	bne.w	8002668 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d00f      	beq.n	8002430 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	400a      	ands	r2, r1
 800242a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800242e:	e049      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2201      	movs	r2, #1
 800243e:	409a      	lsls	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b09      	cmp	r3, #9
 8002450:	d91c      	bls.n	800248c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6999      	ldr	r1, [r3, #24]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	3b1b      	subs	r3, #27
 8002464:	2207      	movs	r2, #7
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	4019      	ands	r1, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6898      	ldr	r0, [r3, #8]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	3b1b      	subs	r3, #27
 800247e:	fa00 f203 	lsl.w	r2, r0, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	619a      	str	r2, [r3, #24]
 800248a:	e01b      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6959      	ldr	r1, [r3, #20]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	2207      	movs	r2, #7
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	4019      	ands	r1, r3
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6898      	ldr	r0, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	fa00 f203 	lsl.w	r2, r0, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024cc:	d004      	beq.n	80024d8 <HAL_ADC_ConfigChannel+0x41c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_ADC_ConfigChannel+0x478>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x420>
 80024d8:	4b17      	ldr	r3, [pc, #92]	; (8002538 <HAL_ADC_ConfigChannel+0x47c>)
 80024da:	e000      	b.n	80024de <HAL_ADC_ConfigChannel+0x422>
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_ADC_ConfigChannel+0x480>)
 80024de:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d105      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d015      	beq.n	8002520 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024f8:	2b11      	cmp	r3, #17
 80024fa:	d105      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800250c:	2b12      	cmp	r3, #18
 800250e:	f040 80ab 	bne.w	8002668 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 80a4 	bne.w	8002668 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002528:	d10a      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x484>
 800252a:	4b02      	ldr	r3, [pc, #8]	; (8002534 <HAL_ADC_ConfigChannel+0x478>)
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e022      	b.n	8002576 <HAL_ADC_ConfigChannel+0x4ba>
 8002530:	83fff000 	.word	0x83fff000
 8002534:	50000100 	.word	0x50000100
 8002538:	50000300 	.word	0x50000300
 800253c:	50000700 	.word	0x50000700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a4e      	ldr	r2, [pc, #312]	; (8002680 <HAL_ADC_ConfigChannel+0x5c4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d103      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x496>
 800254a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e011      	b.n	8002576 <HAL_ADC_ConfigChannel+0x4ba>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a4b      	ldr	r2, [pc, #300]	; (8002684 <HAL_ADC_ConfigChannel+0x5c8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d102      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x4a6>
 800255c:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <HAL_ADC_ConfigChannel+0x5cc>)
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e009      	b.n	8002576 <HAL_ADC_ConfigChannel+0x4ba>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a48      	ldr	r2, [pc, #288]	; (8002688 <HAL_ADC_ConfigChannel+0x5cc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d102      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x4b6>
 800256c:	4b45      	ldr	r3, [pc, #276]	; (8002684 <HAL_ADC_ConfigChannel+0x5c8>)
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e001      	b.n	8002576 <HAL_ADC_ConfigChannel+0x4ba>
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d108      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x4da>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x4da>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_ADC_ConfigChannel+0x4dc>
 8002596:	2300      	movs	r3, #0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d150      	bne.n	800263e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800259c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d010      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_ADC_ConfigChannel+0x502>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x502>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x504>
 80025be:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d13c      	bne.n	800263e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d11d      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x54c>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d4:	d118      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80025d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_ADC_ConfigChannel+0x5d0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2a      	ldr	r2, [pc, #168]	; (8002690 <HAL_ADC_ConfigChannel+0x5d4>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	0c9a      	lsrs	r2, r3, #18
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025f8:	e002      	b.n	8002600 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f9      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002606:	e02e      	b.n	8002666 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b11      	cmp	r3, #17
 800260e:	d10b      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x56c>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002618:	d106      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800261a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002624:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002626:	e01e      	b.n	8002666 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b12      	cmp	r3, #18
 800262e:	d11a      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800263a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800263c:	e013      	b.n	8002666 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f043 0220 	orr.w	r2, r3, #32
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002650:	e00a      	b.n	8002668 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f043 0220 	orr.w	r2, r3, #32
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002664:	e000      	b.n	8002668 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002666:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002670:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002674:	4618      	mov	r0, r3
 8002676:	376c      	adds	r7, #108	; 0x6c
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	50000100 	.word	0x50000100
 8002684:	50000400 	.word	0x50000400
 8002688:	50000500 	.word	0x50000500
 800268c:	20000008 	.word	0x20000008
 8002690:	431bde83 	.word	0x431bde83

08002694 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d108      	bne.n	80026c0 <ADC_Enable+0x2c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <ADC_Enable+0x2c>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <ADC_Enable+0x2e>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d143      	bne.n	800274e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	4b22      	ldr	r3, [pc, #136]	; (8002758 <ADC_Enable+0xc4>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00d      	beq.n	80026f0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f043 0210 	orr.w	r2, r3, #16
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e02f      	b.n	8002750 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002700:	f7fe fe80 	bl	8001404 <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002706:	e01b      	b.n	8002740 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002708:	f7fe fe7c 	bl	8001404 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d914      	bls.n	8002740 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d00d      	beq.n	8002740 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f043 0210 	orr.w	r2, r3, #16
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e007      	b.n	8002750 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d1dc      	bne.n	8002708 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	8000003f 	.word	0x8000003f

0800275c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d108      	bne.n	8002788 <ADC_Disable+0x2c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <ADC_Disable+0x2c>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <ADC_Disable+0x2e>
 8002788:	2300      	movs	r3, #0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d047      	beq.n	800281e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030d 	and.w	r3, r3, #13
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10f      	bne.n	80027bc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0202 	orr.w	r2, r2, #2
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2203      	movs	r2, #3
 80027b2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80027b4:	f7fe fe26 	bl	8001404 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027ba:	e029      	b.n	8002810 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	f043 0210 	orr.w	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e023      	b.n	8002820 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027d8:	f7fe fe14 	bl	8001404 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d914      	bls.n	8002810 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d10d      	bne.n	8002810 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f043 0210 	orr.w	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e007      	b.n	8002820 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d0dc      	beq.n	80027d8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285a:	4a04      	ldr	r2, [pc, #16]	; (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	60d3      	str	r3, [r2, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <__NVIC_GetPriorityGrouping+0x18>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0307 	and.w	r3, r3, #7
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	2b00      	cmp	r3, #0
 800289c:	db0b      	blt.n	80028b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4907      	ldr	r1, [pc, #28]	; (80028c4 <__NVIC_EnableIRQ+0x38>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2001      	movs	r0, #1
 80028ae:	fa00 f202 	lsl.w	r2, r0, r2
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000e100 	.word	0xe000e100

080028c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	6039      	str	r1, [r7, #0]
 80028d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	db0a      	blt.n	80028f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	490c      	ldr	r1, [pc, #48]	; (8002914 <__NVIC_SetPriority+0x4c>)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	0112      	lsls	r2, r2, #4
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	440b      	add	r3, r1
 80028ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f0:	e00a      	b.n	8002908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4908      	ldr	r1, [pc, #32]	; (8002918 <__NVIC_SetPriority+0x50>)
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	3b04      	subs	r3, #4
 8002900:	0112      	lsls	r2, r2, #4
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	440b      	add	r3, r1
 8002906:	761a      	strb	r2, [r3, #24]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000e100 	.word	0xe000e100
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	; 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f1c3 0307 	rsb	r3, r3, #7
 8002936:	2b04      	cmp	r3, #4
 8002938:	bf28      	it	cs
 800293a:	2304      	movcs	r3, #4
 800293c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3304      	adds	r3, #4
 8002942:	2b06      	cmp	r3, #6
 8002944:	d902      	bls.n	800294c <NVIC_EncodePriority+0x30>
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3b03      	subs	r3, #3
 800294a:	e000      	b.n	800294e <NVIC_EncodePriority+0x32>
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	f04f 32ff 	mov.w	r2, #4294967295
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43da      	mvns	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	401a      	ands	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fa01 f303 	lsl.w	r3, r1, r3
 800296e:	43d9      	mvns	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	4313      	orrs	r3, r2
         );
}
 8002976:	4618      	mov	r0, r3
 8002978:	3724      	adds	r7, #36	; 0x24
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002994:	d301      	bcc.n	800299a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002996:	2301      	movs	r3, #1
 8002998:	e00f      	b.n	80029ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <SysTick_Config+0x40>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a2:	210f      	movs	r1, #15
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	f7ff ff8e 	bl	80028c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <SysTick_Config+0x40>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b2:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <SysTick_Config+0x40>)
 80029b4:	2207      	movs	r2, #7
 80029b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	e000e010 	.word	0xe000e010

080029c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ff29 	bl	8002828 <__NVIC_SetPriorityGrouping>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f0:	f7ff ff3e 	bl	8002870 <__NVIC_GetPriorityGrouping>
 80029f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f7ff ff8e 	bl	800291c <NVIC_EncodePriority>
 8002a00:	4602      	mov	r2, r0
 8002a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff5d 	bl	80028c8 <__NVIC_SetPriority>
}
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff31 	bl	800288c <__NVIC_EnableIRQ>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ffa2 	bl	8002984 <SysTick_Config>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5a:	e154      	b.n	8002d06 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8146 	beq.w	8002d00 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d005      	beq.n	8002a8c <HAL_GPIO_Init+0x40>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d130      	bne.n	8002aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 0201 	and.w	r2, r3, #1
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d017      	beq.n	8002b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d123      	bne.n	8002b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	6939      	ldr	r1, [r7, #16]
 8002b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a0 	beq.w	8002d00 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc0:	4b58      	ldr	r3, [pc, #352]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	4a57      	ldr	r2, [pc, #348]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6193      	str	r3, [r2, #24]
 8002bcc:	4b55      	ldr	r3, [pc, #340]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bd8:	4a53      	ldr	r2, [pc, #332]	; (8002d28 <HAL_GPIO_Init+0x2dc>)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c02:	d019      	beq.n	8002c38 <HAL_GPIO_Init+0x1ec>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a49      	ldr	r2, [pc, #292]	; (8002d2c <HAL_GPIO_Init+0x2e0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <HAL_GPIO_Init+0x1e8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a48      	ldr	r2, [pc, #288]	; (8002d30 <HAL_GPIO_Init+0x2e4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00d      	beq.n	8002c30 <HAL_GPIO_Init+0x1e4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a47      	ldr	r2, [pc, #284]	; (8002d34 <HAL_GPIO_Init+0x2e8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <HAL_GPIO_Init+0x1e0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a46      	ldr	r2, [pc, #280]	; (8002d38 <HAL_GPIO_Init+0x2ec>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_GPIO_Init+0x1dc>
 8002c24:	2304      	movs	r3, #4
 8002c26:	e008      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c28:	2305      	movs	r3, #5
 8002c2a:	e006      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e004      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	f002 0203 	and.w	r2, r2, #3
 8002c40:	0092      	lsls	r2, r2, #2
 8002c42:	4093      	lsls	r3, r2
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c4a:	4937      	ldr	r1, [pc, #220]	; (8002d28 <HAL_GPIO_Init+0x2dc>)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c58:	4b38      	ldr	r3, [pc, #224]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c7c:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cac:	4b23      	ldr	r3, [pc, #140]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cd0:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cfa:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3301      	adds	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f aea3 	bne.w	8002a5c <HAL_GPIO_Init+0x10>
  }
}
 8002d16:	bf00      	nop
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40010000 	.word	0x40010000
 8002d2c:	48000400 	.word	0x48000400
 8002d30:	48000800 	.word	0x48000800
 8002d34:	48000c00 	.word	0x48000c00
 8002d38:	48001000 	.word	0x48001000
 8002d3c:	40010400 	.word	0x40010400

08002d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e001      	b.n	8002d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d80:	787b      	ldrb	r3, [r7, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d8c:	e002      	b.n	8002d94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d8e:	887a      	ldrh	r2, [r7, #2]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d006      	beq.n	8002dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fb1e 	bl	8000400 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e081      	b.n	8002ee6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe f8ee 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	e006      	b.n	8002e58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d104      	bne.n	8002e6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69d9      	ldr	r1, [r3, #28]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1a      	ldr	r2, [r3, #32]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d138      	bne.n	8002f76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e032      	b.n	8002f78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2224      	movs	r2, #36	; 0x24
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0201 	orr.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e000      	b.n	8002f78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f76:	2302      	movs	r3, #2
  }
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d139      	bne.n	800300e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e033      	b.n	8003010 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800301c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301e:	b08b      	sub	sp, #44	; 0x2c
 8003020:	af06      	add	r7, sp, #24
 8003022:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0c4      	b.n	80031b8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe f8ac 	bl	80011a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2203      	movs	r2, #3
 800304c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f002 fd19 	bl	8005a8c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	e040      	b.n	80030e2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	3301      	adds	r3, #1
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	440b      	add	r3, r1
 800309a:	3303      	adds	r3, #3
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	440b      	add	r3, r1
 80030ae:	3338      	adds	r3, #56	; 0x38
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	333c      	adds	r3, #60	; 0x3c
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3340      	adds	r3, #64	; 0x40
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	3301      	adds	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3b9      	bcc.n	8003060 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e044      	b.n	800317c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	440b      	add	r3, r1
 8003116:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	440b      	add	r3, r1
 800312c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	440b      	add	r3, r1
 8003142:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	3301      	adds	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d3b5      	bcc.n	80030f2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	687e      	ldr	r6, [r7, #4]
 800318e:	466d      	mov	r5, sp
 8003190:	f106 0410 	add.w	r4, r6, #16
 8003194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	602b      	str	r3, [r5, #0]
 800319c:	1d33      	adds	r3, r6, #4
 800319e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a0:	6838      	ldr	r0, [r7, #0]
 80031a2:	f002 fc8e 	bl	8005ac2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f001 b823 	b.w	800422c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 817d 	beq.w	80034f6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031fc:	4bbc      	ldr	r3, [pc, #752]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b04      	cmp	r3, #4
 8003206:	d00c      	beq.n	8003222 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003208:	4bb9      	ldr	r3, [pc, #740]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d15c      	bne.n	80032ce <HAL_RCC_OscConfig+0x10e>
 8003214:	4bb6      	ldr	r3, [pc, #728]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d155      	bne.n	80032ce <HAL_RCC_OscConfig+0x10e>
 8003222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003226:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003236:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d102      	bne.n	8003254 <HAL_RCC_OscConfig+0x94>
 800324e:	4ba8      	ldr	r3, [pc, #672]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	e015      	b.n	8003280 <HAL_RCC_OscConfig+0xc0>
 8003254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003258:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003270:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800327c:	4b9c      	ldr	r3, [pc, #624]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003284:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003288:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800328c:	fa92 f2a2 	rbit	r2, r2
 8003290:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003294:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f042 0220 	orr.w	r2, r2, #32
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 811f 	beq.w	80034f4 <HAL_RCC_OscConfig+0x334>
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 8116 	bne.w	80034f4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f000 bfaf 	b.w	800422c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x12e>
 80032e0:	4b83      	ldr	r3, [pc, #524]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a82      	ldr	r2, [pc, #520]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	e036      	b.n	800335c <HAL_RCC_OscConfig+0x19c>
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x158>
 80032fe:	4b7c      	ldr	r3, [pc, #496]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a7b      	ldr	r2, [pc, #492]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b79      	ldr	r3, [pc, #484]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a78      	ldr	r2, [pc, #480]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e021      	b.n	800335c <HAL_RCC_OscConfig+0x19c>
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0x184>
 800332a:	4b71      	ldr	r3, [pc, #452]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a70      	ldr	r2, [pc, #448]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b6e      	ldr	r3, [pc, #440]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6d      	ldr	r2, [pc, #436]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0x19c>
 8003344:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a69      	ldr	r2, [pc, #420]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b67      	ldr	r3, [pc, #412]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a66      	ldr	r2, [pc, #408]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800335c:	4b64      	ldr	r3, [pc, #400]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	f023 020f 	bic.w	r2, r3, #15
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	495f      	ldr	r1, [pc, #380]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003372:	4313      	orrs	r3, r2
 8003374:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d059      	beq.n	800343a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7fe f83d 	bl	8001404 <HAL_GetTick>
 800338a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003390:	f7fe f838 	bl	8001404 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b64      	cmp	r3, #100	; 0x64
 800339e:	d902      	bls.n	80033a6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	f000 bf43 	b.w	800422c <HAL_RCC_OscConfig+0x106c>
 80033a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033aa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80033ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_OscConfig+0x218>
 80033d2:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	e015      	b.n	8003404 <HAL_RCC_OscConfig+0x244>
 80033d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003408:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800340c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003410:	fa92 f2a2 	rbit	r2, r2
 8003414:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003418:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800341c:	fab2 f282 	clz	r2, r2
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	f042 0220 	orr.w	r2, r2, #32
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	f002 021f 	and.w	r2, r2, #31
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ab      	beq.n	8003390 <HAL_RCC_OscConfig+0x1d0>
 8003438:	e05d      	b.n	80034f6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fd ffe3 	bl	8001404 <HAL_GetTick>
 800343e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003444:	f7fd ffde 	bl	8001404 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b64      	cmp	r3, #100	; 0x64
 8003452:	d902      	bls.n	800345a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	f000 bee9 	b.w	800422c <HAL_RCC_OscConfig+0x106c>
 800345a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800345e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800346e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_RCC_OscConfig+0x2cc>
 8003486:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e015      	b.n	80034b8 <HAL_RCC_OscConfig+0x2f8>
 800348c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003490:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80034a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80034a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_RCC_OscConfig+0x330>)
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034bc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80034c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034c4:	fa92 f2a2 	rbit	r2, r2
 80034c8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80034cc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80034d0:	fab2 f282 	clz	r2, r2
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	f042 0220 	orr.w	r2, r2, #32
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	f002 021f 	and.w	r2, r2, #31
 80034e0:	2101      	movs	r1, #1
 80034e2:	fa01 f202 	lsl.w	r2, r1, r2
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ab      	bne.n	8003444 <HAL_RCC_OscConfig+0x284>
 80034ec:	e003      	b.n	80034f6 <HAL_RCC_OscConfig+0x336>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 817d 	beq.w	8003806 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800350c:	4ba6      	ldr	r3, [pc, #664]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003518:	4ba3      	ldr	r3, [pc, #652]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b08      	cmp	r3, #8
 8003522:	d172      	bne.n	800360a <HAL_RCC_OscConfig+0x44a>
 8003524:	4ba0      	ldr	r3, [pc, #640]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d16c      	bne.n	800360a <HAL_RCC_OscConfig+0x44a>
 8003530:	2302      	movs	r3, #2
 8003532:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003542:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003546:	fab3 f383 	clz	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d102      	bne.n	8003560 <HAL_RCC_OscConfig+0x3a0>
 800355a:	4b93      	ldr	r3, [pc, #588]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	e013      	b.n	8003588 <HAL_RCC_OscConfig+0x3c8>
 8003560:	2302      	movs	r3, #2
 8003562:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003572:	2302      	movs	r3, #2
 8003574:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003578:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003584:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	2202      	movs	r2, #2
 800358a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800358e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003592:	fa92 f2a2 	rbit	r2, r2
 8003596:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800359a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800359e:	fab2 f282 	clz	r2, r2
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	f042 0220 	orr.w	r2, r2, #32
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f002 021f 	and.w	r2, r2, #31
 80035ae:	2101      	movs	r1, #1
 80035b0:	fa01 f202 	lsl.w	r2, r1, r2
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCC_OscConfig+0x410>
 80035ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f000 be2e 	b.w	800422c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d0:	4b75      	ldr	r3, [pc, #468]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	21f8      	movs	r1, #248	; 0xf8
 80035e6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035ee:	fa91 f1a1 	rbit	r1, r1
 80035f2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80035f6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80035fa:	fab1 f181 	clz	r1, r1
 80035fe:	b2c9      	uxtb	r1, r1
 8003600:	408b      	lsls	r3, r1
 8003602:	4969      	ldr	r1, [pc, #420]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 8003604:	4313      	orrs	r3, r2
 8003606:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003608:	e0fd      	b.n	8003806 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8088 	beq.w	800372c <HAL_RCC_OscConfig+0x56c>
 800361c:	2301      	movs	r3, #1
 800361e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800362e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800363c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	461a      	mov	r2, r3
 8003644:	2301      	movs	r3, #1
 8003646:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fd fedc 	bl	8001404 <HAL_GetTick>
 800364c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003652:	f7fd fed7 	bl	8001404 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d902      	bls.n	8003668 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	f000 bde2 	b.w	800422c <HAL_RCC_OscConfig+0x106c>
 8003668:	2302      	movs	r3, #2
 800366a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800367a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d102      	bne.n	8003698 <HAL_RCC_OscConfig+0x4d8>
 8003692:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	e013      	b.n	80036c0 <HAL_RCC_OscConfig+0x500>
 8003698:	2302      	movs	r3, #2
 800369a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036aa:	2302      	movs	r3, #2
 80036ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80036bc:	4b3a      	ldr	r3, [pc, #232]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2202      	movs	r2, #2
 80036c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80036c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80036ca:	fa92 f2a2 	rbit	r2, r2
 80036ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80036d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80036d6:	fab2 f282 	clz	r2, r2
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f042 0220 	orr.w	r2, r2, #32
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f002 021f 	and.w	r2, r2, #31
 80036e6:	2101      	movs	r1, #1
 80036e8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0af      	beq.n	8003652 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	21f8      	movs	r1, #248	; 0xf8
 8003708:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003710:	fa91 f1a1 	rbit	r1, r1
 8003714:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003718:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800371c:	fab1 f181 	clz	r1, r1
 8003720:	b2c9      	uxtb	r1, r1
 8003722:	408b      	lsls	r3, r1
 8003724:	4920      	ldr	r1, [pc, #128]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
 800372a:	e06c      	b.n	8003806 <HAL_RCC_OscConfig+0x646>
 800372c:	2301      	movs	r3, #1
 800372e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800373e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800374c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	461a      	mov	r2, r3
 8003754:	2300      	movs	r3, #0
 8003756:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fd fe54 	bl	8001404 <HAL_GetTick>
 800375c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003762:	f7fd fe4f 	bl	8001404 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d902      	bls.n	8003778 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	f000 bd5a 	b.w	800422c <HAL_RCC_OscConfig+0x106c>
 8003778:	2302      	movs	r3, #2
 800377a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800378a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d104      	bne.n	80037ac <HAL_RCC_OscConfig+0x5ec>
 80037a2:	4b01      	ldr	r3, [pc, #4]	; (80037a8 <HAL_RCC_OscConfig+0x5e8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	e015      	b.n	80037d4 <HAL_RCC_OscConfig+0x614>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	2302      	movs	r3, #2
 80037ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037be:	2302      	movs	r3, #2
 80037c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80037d0:	4bc8      	ldr	r3, [pc, #800]	; (8003af4 <HAL_RCC_OscConfig+0x934>)
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2202      	movs	r2, #2
 80037d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80037da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037de:	fa92 f2a2 	rbit	r2, r2
 80037e2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80037e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037ea:	fab2 f282 	clz	r2, r2
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	f042 0220 	orr.w	r2, r2, #32
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	f002 021f 	and.w	r2, r2, #31
 80037fa:	2101      	movs	r1, #1
 80037fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003800:	4013      	ands	r3, r2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1ad      	bne.n	8003762 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8110 	beq.w	8003a3c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800381c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003820:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d079      	beq.n	8003920 <HAL_RCC_OscConfig+0x760>
 800382c:	2301      	movs	r3, #1
 800382e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800383e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	4bab      	ldr	r3, [pc, #684]	; (8003af8 <HAL_RCC_OscConfig+0x938>)
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	461a      	mov	r2, r3
 8003852:	2301      	movs	r3, #1
 8003854:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7fd fdd5 	bl	8001404 <HAL_GetTick>
 800385a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003860:	f7fd fdd0 	bl	8001404 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d902      	bls.n	8003876 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	f000 bcdb 	b.w	800422c <HAL_RCC_OscConfig+0x106c>
 8003876:	2302      	movs	r3, #2
 8003878:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003890:	2202      	movs	r2, #2
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	fa93 f2a3 	rbit	r2, r3
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038b4:	2202      	movs	r2, #2
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	fa93 f2a3 	rbit	r2, r3
 80038c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d0:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x934>)
 80038d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038dc:	2102      	movs	r1, #2
 80038de:	6019      	str	r1, [r3, #0]
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	fa93 f1a3 	rbit	r1, r3
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038f6:	6019      	str	r1, [r3, #0]
  return result;
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	2101      	movs	r1, #1
 8003914:	fa01 f303 	lsl.w	r3, r1, r3
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0a0      	beq.n	8003860 <HAL_RCC_OscConfig+0x6a0>
 800391e:	e08d      	b.n	8003a3c <HAL_RCC_OscConfig+0x87c>
 8003920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003924:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003930:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	fa93 f2a3 	rbit	r2, r3
 800393a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003942:	601a      	str	r2, [r3, #0]
  return result;
 8003944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003948:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800394c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	4b68      	ldr	r3, [pc, #416]	; (8003af8 <HAL_RCC_OscConfig+0x938>)
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	461a      	mov	r2, r3
 800395e:	2300      	movs	r3, #0
 8003960:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003962:	f7fd fd4f 	bl	8001404 <HAL_GetTick>
 8003966:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396a:	e00a      	b.n	8003982 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396c:	f7fd fd4a 	bl	8001404 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d902      	bls.n	8003982 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	f000 bc55 	b.w	800422c <HAL_RCC_OscConfig+0x106c>
 8003982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003986:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800398a:	2202      	movs	r2, #2
 800398c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003992:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	fa93 f2a3 	rbit	r2, r3
 800399c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039ae:	2202      	movs	r2, #2
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	fa93 f2a3 	rbit	r2, r3
 80039c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039d2:	2202      	movs	r2, #2
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	fa93 f2a3 	rbit	r2, r3
 80039e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ee:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <HAL_RCC_OscConfig+0x934>)
 80039f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039fa:	2102      	movs	r1, #2
 80039fc:	6019      	str	r1, [r3, #0]
 80039fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a02:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f1a3 	rbit	r1, r3
 8003a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a10:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a14:	6019      	str	r1, [r3, #0]
  return result;
 8003a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d197      	bne.n	800396c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 81a1 	beq.w	8003d94 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a58:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <HAL_RCC_OscConfig+0x934>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d116      	bne.n	8003a92 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a64:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_RCC_OscConfig+0x934>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	4a22      	ldr	r2, [pc, #136]	; (8003af4 <HAL_RCC_OscConfig+0x934>)
 8003a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	61d3      	str	r3, [r2, #28]
 8003a70:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_RCC_OscConfig+0x934>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a8a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a92:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <HAL_RCC_OscConfig+0x93c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d11a      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9e:	4b17      	ldr	r3, [pc, #92]	; (8003afc <HAL_RCC_OscConfig+0x93c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_RCC_OscConfig+0x93c>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aaa:	f7fd fcab 	bl	8001404 <HAL_GetTick>
 8003aae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab2:	e009      	b.n	8003ac8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab4:	f7fd fca6 	bl	8001404 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b64      	cmp	r3, #100	; 0x64
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e3b1      	b.n	800422c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <HAL_RCC_OscConfig+0x93c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ef      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d10d      	bne.n	8003b00 <HAL_RCC_OscConfig+0x940>
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_RCC_OscConfig+0x934>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4a02      	ldr	r2, [pc, #8]	; (8003af4 <HAL_RCC_OscConfig+0x934>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6213      	str	r3, [r2, #32]
 8003af0:	e03c      	b.n	8003b6c <HAL_RCC_OscConfig+0x9ac>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	10908120 	.word	0x10908120
 8003afc:	40007000 	.word	0x40007000
 8003b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10c      	bne.n	8003b2a <HAL_RCC_OscConfig+0x96a>
 8003b10:	4bc1      	ldr	r3, [pc, #772]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4ac0      	ldr	r2, [pc, #768]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	6213      	str	r3, [r2, #32]
 8003b1c:	4bbe      	ldr	r3, [pc, #760]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	4abd      	ldr	r2, [pc, #756]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b22:	f023 0304 	bic.w	r3, r3, #4
 8003b26:	6213      	str	r3, [r2, #32]
 8003b28:	e020      	b.n	8003b6c <HAL_RCC_OscConfig+0x9ac>
 8003b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x994>
 8003b3a:	4bb7      	ldr	r3, [pc, #732]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4ab6      	ldr	r2, [pc, #728]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b40:	f043 0304 	orr.w	r3, r3, #4
 8003b44:	6213      	str	r3, [r2, #32]
 8003b46:	4bb4      	ldr	r3, [pc, #720]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4ab3      	ldr	r2, [pc, #716]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6213      	str	r3, [r2, #32]
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0x9ac>
 8003b54:	4bb0      	ldr	r3, [pc, #704]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	4aaf      	ldr	r2, [pc, #700]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	6213      	str	r3, [r2, #32]
 8003b60:	4bad      	ldr	r3, [pc, #692]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4aac      	ldr	r2, [pc, #688]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003b66:	f023 0304 	bic.w	r3, r3, #4
 8003b6a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8081 	beq.w	8003c80 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7e:	f7fd fc41 	bl	8001404 <HAL_GetTick>
 8003b82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fd fc3c 	bl	8001404 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e345      	b.n	800422c <HAL_RCC_OscConfig+0x106c>
 8003ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ba8:	2202      	movs	r2, #2
 8003baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	fa93 f2a3 	rbit	r2, r3
 8003bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003bcc:	2202      	movs	r2, #2
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	fa93 f2a3 	rbit	r2, r3
 8003bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003be6:	601a      	str	r2, [r3, #0]
  return result;
 8003be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bf0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_OscConfig+0xa4c>
 8003c06:	4b84      	ldr	r3, [pc, #528]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	e013      	b.n	8003c34 <HAL_RCC_OscConfig+0xa74>
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c14:	2202      	movs	r2, #2
 8003c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	fa93 f2a3 	rbit	r2, r3
 8003c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	4b79      	ldr	r3, [pc, #484]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c38:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c3c:	2102      	movs	r1, #2
 8003c3e:	6011      	str	r1, [r2, #0]
 8003c40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c44:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	fa92 f1a2 	rbit	r1, r2
 8003c4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c52:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c56:	6011      	str	r1, [r2, #0]
  return result;
 8003c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c5c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	fab2 f282 	clz	r2, r2
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	f002 021f 	and.w	r2, r2, #31
 8003c72:	2101      	movs	r1, #1
 8003c74:	fa01 f202 	lsl.w	r2, r1, r2
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d084      	beq.n	8003b88 <HAL_RCC_OscConfig+0x9c8>
 8003c7e:	e07f      	b.n	8003d80 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c80:	f7fd fbc0 	bl	8001404 <HAL_GetTick>
 8003c84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c88:	e00b      	b.n	8003ca2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fd fbbb 	bl	8001404 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e2c4      	b.n	800422c <HAL_RCC_OscConfig+0x106c>
 8003ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003caa:	2202      	movs	r2, #2
 8003cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	fa93 f2a3 	rbit	r2, r3
 8003cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003cce:	2202      	movs	r2, #2
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	fa93 f2a3 	rbit	r2, r3
 8003ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ce8:	601a      	str	r2, [r3, #0]
  return result;
 8003cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003cf2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f043 0302 	orr.w	r3, r3, #2
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d102      	bne.n	8003d0e <HAL_RCC_OscConfig+0xb4e>
 8003d08:	4b43      	ldr	r3, [pc, #268]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	e013      	b.n	8003d36 <HAL_RCC_OscConfig+0xb76>
 8003d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d16:	2202      	movs	r2, #2
 8003d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	fa93 f2a3 	rbit	r2, r3
 8003d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d3a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d3e:	2102      	movs	r1, #2
 8003d40:	6011      	str	r1, [r2, #0]
 8003d42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d46:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	fa92 f1a2 	rbit	r1, r2
 8003d50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d54:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d58:	6011      	str	r1, [r2, #0]
  return result;
 8003d5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d5e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	fab2 f282 	clz	r2, r2
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	f002 021f 	and.w	r2, r2, #31
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d184      	bne.n	8003c8a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d80:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d105      	bne.n	8003d94 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d88:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	4a22      	ldr	r2, [pc, #136]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8242 	beq.w	800422a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da6:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <HAL_RCC_OscConfig+0xc58>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	f000 8213 	beq.w	80041da <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	f040 8162 	bne.w	800408a <HAL_RCC_OscConfig+0xeca>
 8003dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003dce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	fa93 f2a3 	rbit	r2, r3
 8003de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003dea:	601a      	str	r2, [r3, #0]
  return result;
 8003dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003df4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	461a      	mov	r2, r3
 8003e08:	2300      	movs	r3, #0
 8003e0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fd fafa 	bl	8001404 <HAL_GetTick>
 8003e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e14:	e00c      	b.n	8003e30 <HAL_RCC_OscConfig+0xc70>
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fd faf2 	bl	8001404 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e1fd      	b.n	800422c <HAL_RCC_OscConfig+0x106c>
 8003e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e34:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e42:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	fa93 f2a3 	rbit	r2, r3
 8003e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e50:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e54:	601a      	str	r2, [r3, #0]
  return result;
 8003e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e60:	fab3 f383 	clz	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d102      	bne.n	8003e7a <HAL_RCC_OscConfig+0xcba>
 8003e74:	4bb0      	ldr	r3, [pc, #704]	; (8004138 <HAL_RCC_OscConfig+0xf78>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	e027      	b.n	8003eca <HAL_RCC_OscConfig+0xd0a>
 8003e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	fa93 f2a3 	rbit	r2, r3
 8003e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	fa93 f2a3 	rbit	r2, r3
 8003ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	4b9c      	ldr	r3, [pc, #624]	; (8004138 <HAL_RCC_OscConfig+0xf78>)
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ece:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ed2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ed6:	6011      	str	r1, [r2, #0]
 8003ed8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003edc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ee0:	6812      	ldr	r2, [r2, #0]
 8003ee2:	fa92 f1a2 	rbit	r1, r2
 8003ee6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003eee:	6011      	str	r1, [r2, #0]
  return result;
 8003ef0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ef4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	fab2 f282 	clz	r2, r2
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	f042 0220 	orr.w	r2, r2, #32
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	f002 021f 	and.w	r2, r2, #31
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d182      	bne.n	8003e1c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f16:	4b88      	ldr	r3, [pc, #544]	; (8004138 <HAL_RCC_OscConfig+0xf78>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	430b      	orrs	r3, r1
 8003f38:	497f      	ldr	r1, [pc, #508]	; (8004138 <HAL_RCC_OscConfig+0xf78>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
 8003f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f42:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f50:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	fa93 f2a3 	rbit	r2, r3
 8003f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f62:	601a      	str	r2, [r3, #0]
  return result;
 8003f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f68:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f6c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	461a      	mov	r2, r3
 8003f80:	2301      	movs	r3, #1
 8003f82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7fd fa3e 	bl	8001404 <HAL_GetTick>
 8003f88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f8c:	e009      	b.n	8003fa2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8e:	f7fd fa39 	bl	8001404 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e144      	b.n	800422c <HAL_RCC_OscConfig+0x106c>
 8003fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	fa93 f2a3 	rbit	r2, r3
 8003fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fc6:	601a      	str	r2, [r3, #0]
  return result;
 8003fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fcc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fd2:	fab3 f383 	clz	r3, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d102      	bne.n	8003fec <HAL_RCC_OscConfig+0xe2c>
 8003fe6:	4b54      	ldr	r3, [pc, #336]	; (8004138 <HAL_RCC_OscConfig+0xf78>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	e027      	b.n	800403c <HAL_RCC_OscConfig+0xe7c>
 8003fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	fa93 f2a3 	rbit	r2, r3
 8004008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004016:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800401a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004024:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	fa93 f2a3 	rbit	r2, r3
 800402e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004032:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_RCC_OscConfig+0xf78>)
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004040:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004044:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004048:	6011      	str	r1, [r2, #0]
 800404a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800404e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	fa92 f1a2 	rbit	r1, r2
 8004058:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800405c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004060:	6011      	str	r1, [r2, #0]
  return result;
 8004062:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004066:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	fab2 f282 	clz	r2, r2
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	f042 0220 	orr.w	r2, r2, #32
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	f002 021f 	and.w	r2, r2, #31
 800407c:	2101      	movs	r1, #1
 800407e:	fa01 f202 	lsl.w	r2, r1, r2
 8004082:	4013      	ands	r3, r2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d082      	beq.n	8003f8e <HAL_RCC_OscConfig+0xdce>
 8004088:	e0cf      	b.n	800422a <HAL_RCC_OscConfig+0x106a>
 800408a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004092:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	fa93 f2a3 	rbit	r2, r3
 80040a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040ae:	601a      	str	r2, [r3, #0]
  return result;
 80040b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	fab3 f383 	clz	r3, r3
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	461a      	mov	r2, r3
 80040cc:	2300      	movs	r3, #0
 80040ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fd f998 	bl	8001404 <HAL_GetTick>
 80040d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d8:	e009      	b.n	80040ee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040da:	f7fd f993 	bl	8001404 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e09e      	b.n	800422c <HAL_RCC_OscConfig+0x106c>
 80040ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004100:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	fa93 f2a3 	rbit	r2, r3
 800410a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004112:	601a      	str	r2, [r3, #0]
  return result;
 8004114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004118:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800411c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	d104      	bne.n	800413c <HAL_RCC_OscConfig+0xf7c>
 8004132:	4b01      	ldr	r3, [pc, #4]	; (8004138 <HAL_RCC_OscConfig+0xf78>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	e029      	b.n	800418c <HAL_RCC_OscConfig+0xfcc>
 8004138:	40021000 	.word	0x40021000
 800413c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004140:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004144:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	fa93 f2a3 	rbit	r2, r3
 8004158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004166:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800416a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004174:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	fa93 f2a3 	rbit	r2, r3
 800417e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004182:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <HAL_RCC_OscConfig+0x1078>)
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004190:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004194:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004198:	6011      	str	r1, [r2, #0]
 800419a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800419e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	fa92 f1a2 	rbit	r1, r2
 80041a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041b0:	6011      	str	r1, [r2, #0]
  return result;
 80041b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041b6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	fab2 f282 	clz	r2, r2
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	f042 0220 	orr.w	r2, r2, #32
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	f002 021f 	and.w	r2, r2, #31
 80041cc:	2101      	movs	r1, #1
 80041ce:	fa01 f202 	lsl.w	r2, r1, r2
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d180      	bne.n	80040da <HAL_RCC_OscConfig+0xf1a>
 80041d8:	e027      	b.n	800422a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e01e      	b.n	800422c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_RCC_OscConfig+0x1078>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	429a      	cmp	r2, r3
 800420c:	d10b      	bne.n	8004226 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800420e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004212:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004222:	429a      	cmp	r2, r3
 8004224:	d001      	beq.n	800422a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000

0800423c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b09e      	sub	sp, #120	; 0x78
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e162      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b90      	ldr	r3, [pc, #576]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d910      	bls.n	8004284 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b8d      	ldr	r3, [pc, #564]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 0207 	bic.w	r2, r3, #7
 800426a:	498b      	ldr	r1, [pc, #556]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b89      	ldr	r3, [pc, #548]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e14a      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b82      	ldr	r3, [pc, #520]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	497f      	ldr	r1, [pc, #508]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80dc 	beq.w	8004468 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d13c      	bne.n	8004332 <HAL_RCC_ClockConfig+0xf6>
 80042b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d102      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xa6>
 80042dc:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	e00f      	b.n	8004302 <HAL_RCC_ClockConfig+0xc6>
 80042e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	667b      	str	r3, [r7, #100]	; 0x64
 80042f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f4:	663b      	str	r3, [r7, #96]	; 0x60
 80042f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042fe:	4b67      	ldr	r3, [pc, #412]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004306:	65ba      	str	r2, [r7, #88]	; 0x58
 8004308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800430a:	fa92 f2a2 	rbit	r2, r2
 800430e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004310:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004312:	fab2 f282 	clz	r2, r2
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	f042 0220 	orr.w	r2, r2, #32
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	f002 021f 	and.w	r2, r2, #31
 8004322:	2101      	movs	r1, #1
 8004324:	fa01 f202 	lsl.w	r2, r1, r2
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d17b      	bne.n	8004426 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0f3      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d13c      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x178>
 800433a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434a:	fab3 f383 	clz	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	b2db      	uxtb	r3, r3
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d102      	bne.n	8004364 <HAL_RCC_ClockConfig+0x128>
 800435e:	4b4f      	ldr	r3, [pc, #316]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	e00f      	b.n	8004384 <HAL_RCC_ClockConfig+0x148>
 8004364:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004368:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800436c:	fa93 f3a3 	rbit	r3, r3
 8004370:	647b      	str	r3, [r7, #68]	; 0x44
 8004372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004376:	643b      	str	r3, [r7, #64]	; 0x40
 8004378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004380:	4b46      	ldr	r3, [pc, #280]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004388:	63ba      	str	r2, [r7, #56]	; 0x38
 800438a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438c:	fa92 f2a2 	rbit	r2, r2
 8004390:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004394:	fab2 f282 	clz	r2, r2
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	f042 0220 	orr.w	r2, r2, #32
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	f002 021f 	and.w	r2, r2, #31
 80043a4:	2101      	movs	r1, #1
 80043a6:	fa01 f202 	lsl.w	r2, r1, r2
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d13a      	bne.n	8004426 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0b2      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
 80043b4:	2302      	movs	r3, #2
 80043b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <HAL_RCC_ClockConfig+0x1a0>
 80043d6:	4b31      	ldr	r3, [pc, #196]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	e00d      	b.n	80043f8 <HAL_RCC_ClockConfig+0x1bc>
 80043dc:	2302      	movs	r3, #2
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
 80043e8:	2302      	movs	r3, #2
 80043ea:	623b      	str	r3, [r7, #32]
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	fa93 f3a3 	rbit	r3, r3
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	4b29      	ldr	r3, [pc, #164]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	2202      	movs	r2, #2
 80043fa:	61ba      	str	r2, [r7, #24]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	fa92 f2a2 	rbit	r2, r2
 8004402:	617a      	str	r2, [r7, #20]
  return result;
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	fab2 f282 	clz	r2, r2
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	f042 0220 	orr.w	r2, r2, #32
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	f002 021f 	and.w	r2, r2, #31
 8004416:	2101      	movs	r1, #1
 8004418:	fa01 f202 	lsl.w	r2, r1, r2
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e079      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f023 0203 	bic.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	491a      	ldr	r1, [pc, #104]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004438:	f7fc ffe4 	bl	8001404 <HAL_GetTick>
 800443c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	e00a      	b.n	8004456 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004440:	f7fc ffe0 	bl	8001404 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	; 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e061      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	4b11      	ldr	r3, [pc, #68]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 020c 	and.w	r2, r3, #12
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	429a      	cmp	r2, r3
 8004466:	d1eb      	bne.n	8004440 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d214      	bcs.n	80044a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 0207 	bic.w	r2, r3, #7
 800447e:	4906      	ldr	r1, [pc, #24]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004486:	4b04      	ldr	r3, [pc, #16]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e040      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
 8004498:	40022000 	.word	0x40022000
 800449c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_RCC_ClockConfig+0x2e8>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	491a      	ldr	r1, [pc, #104]	; (8004524 <HAL_RCC_ClockConfig+0x2e8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ca:	4b16      	ldr	r3, [pc, #88]	; (8004524 <HAL_RCC_ClockConfig+0x2e8>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4912      	ldr	r1, [pc, #72]	; (8004524 <HAL_RCC_ClockConfig+0x2e8>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044de:	f000 f829 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 80044e2:	4601      	mov	r1, r0
 80044e4:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <HAL_RCC_ClockConfig+0x2e8>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ec:	22f0      	movs	r2, #240	; 0xf0
 80044ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	fa92 f2a2 	rbit	r2, r2
 80044f6:	60fa      	str	r2, [r7, #12]
  return result;
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	fab2 f282 	clz	r2, r2
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	40d3      	lsrs	r3, r2
 8004502:	4a09      	ldr	r2, [pc, #36]	; (8004528 <HAL_RCC_ClockConfig+0x2ec>)
 8004504:	5cd3      	ldrb	r3, [r2, r3]
 8004506:	fa21 f303 	lsr.w	r3, r1, r3
 800450a:	4a08      	ldr	r2, [pc, #32]	; (800452c <HAL_RCC_ClockConfig+0x2f0>)
 800450c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_RCC_ClockConfig+0x2f4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fc ff32 	bl	800137c <HAL_InitTick>
  
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3778      	adds	r7, #120	; 0x78
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	0800709c 	.word	0x0800709c
 800452c:	20000008 	.word	0x20000008
 8004530:	2000000c 	.word	0x2000000c

08004534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004534:	b480      	push	{r7}
 8004536:	b08b      	sub	sp, #44	; 0x2c
 8004538:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	2300      	movs	r3, #0
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800454e:	4b29      	ldr	r3, [pc, #164]	; (80045f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b04      	cmp	r3, #4
 800455c:	d002      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0x30>
 800455e:	2b08      	cmp	r3, #8
 8004560:	d003      	beq.n	800456a <HAL_RCC_GetSysClockFreq+0x36>
 8004562:	e03c      	b.n	80045de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004564:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004566:	623b      	str	r3, [r7, #32]
      break;
 8004568:	e03c      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004570:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004574:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	fa92 f2a2 	rbit	r2, r2
 800457c:	607a      	str	r2, [r7, #4]
  return result;
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	fab2 f282 	clz	r2, r2
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	40d3      	lsrs	r3, r2
 8004588:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800458e:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	220f      	movs	r2, #15
 8004598:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	fa92 f2a2 	rbit	r2, r2
 80045a0:	60fa      	str	r2, [r7, #12]
  return result;
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	fab2 f282 	clz	r2, r2
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	40d3      	lsrs	r3, r2
 80045ac:	4a14      	ldr	r2, [pc, #80]	; (8004600 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045bc:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fb02 f303 	mul.w	r3, r2, r3
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
 80045cc:	e004      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	623b      	str	r3, [r7, #32]
      break;
 80045dc:	e002      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045e0:	623b      	str	r3, [r7, #32]
      break;
 80045e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e4:	6a3b      	ldr	r3, [r7, #32]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	372c      	adds	r7, #44	; 0x2c
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
 80045f8:	007a1200 	.word	0x007a1200
 80045fc:	080070ac 	.word	0x080070ac
 8004600:	080070bc 	.word	0x080070bc
 8004604:	003d0900 	.word	0x003d0900

08004608 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b092      	sub	sp, #72	; 0x48
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004618:	2300      	movs	r3, #0
 800461a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80d4 	beq.w	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462c:	4b4e      	ldr	r3, [pc, #312]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10e      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004638:	4b4b      	ldr	r3, [pc, #300]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	4a4a      	ldr	r2, [pc, #296]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004642:	61d3      	str	r3, [r2, #28]
 8004644:	4b48      	ldr	r3, [pc, #288]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b45      	ldr	r3, [pc, #276]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d118      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004662:	4b42      	ldr	r3, [pc, #264]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a41      	ldr	r2, [pc, #260]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466e:	f7fc fec9 	bl	8001404 <HAL_GetTick>
 8004672:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	e008      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004676:	f7fc fec5 	bl	8001404 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b64      	cmp	r3, #100	; 0x64
 8004682:	d901      	bls.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e169      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004688:	4b38      	ldr	r3, [pc, #224]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004694:	4b34      	ldr	r3, [pc, #208]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800469e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8084 	beq.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d07c      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b4:	4b2c      	ldr	r3, [pc, #176]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	fa93 f3a3 	rbit	r3, r3
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	4b26      	ldr	r3, [pc, #152]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	461a      	mov	r2, r3
 80046de:	2301      	movs	r3, #1
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004706:	4a18      	ldr	r2, [pc, #96]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800470c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d04b      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004716:	f7fc fe75 	bl	8001404 <HAL_GetTick>
 800471a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471c:	e00a      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f7fc fe71 	bl	8001404 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f241 3288 	movw	r2, #5000	; 0x1388
 800472c:	4293      	cmp	r3, r2
 800472e:	d901      	bls.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e113      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004734:	2302      	movs	r3, #2
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	fa93 f3a3 	rbit	r3, r3
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
 8004740:	2302      	movs	r3, #2
 8004742:	623b      	str	r3, [r7, #32]
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	fa93 f3a3 	rbit	r3, r3
 800474a:	61fb      	str	r3, [r7, #28]
  return result;
 800474c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d108      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004762:	4b01      	ldr	r3, [pc, #4]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	e00d      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004768:	40021000 	.word	0x40021000
 800476c:	40007000 	.word	0x40007000
 8004770:	10908100 	.word	0x10908100
 8004774:	2302      	movs	r3, #2
 8004776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	4b78      	ldr	r3, [pc, #480]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2202      	movs	r2, #2
 8004786:	613a      	str	r2, [r7, #16]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	fa92 f2a2 	rbit	r2, r2
 800478e:	60fa      	str	r2, [r7, #12]
  return result;
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	fab2 f282 	clz	r2, r2
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	f002 021f 	and.w	r2, r2, #31
 80047a2:	2101      	movs	r1, #1
 80047a4:	fa01 f202 	lsl.w	r2, r1, r2
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0b7      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047ae:	4b6d      	ldr	r3, [pc, #436]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	496a      	ldr	r1, [pc, #424]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c8:	4b66      	ldr	r3, [pc, #408]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4a65      	ldr	r2, [pc, #404]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e0:	4b60      	ldr	r3, [pc, #384]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	f023 0203 	bic.w	r2, r3, #3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	495d      	ldr	r1, [pc, #372]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047fe:	4b59      	ldr	r3, [pc, #356]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	4956      	ldr	r1, [pc, #344]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800480c:	4313      	orrs	r3, r2
 800480e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800481c:	4b51      	ldr	r3, [pc, #324]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	494e      	ldr	r1, [pc, #312]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482a:	4313      	orrs	r3, r2
 800482c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800483a:	4b4a      	ldr	r3, [pc, #296]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f023 0210 	bic.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	4947      	ldr	r1, [pc, #284]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004848:	4313      	orrs	r3, r2
 800484a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004858:	4b42      	ldr	r3, [pc, #264]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	493f      	ldr	r1, [pc, #252]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004876:	4b3b      	ldr	r3, [pc, #236]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	f023 0220 	bic.w	r2, r3, #32
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	4938      	ldr	r1, [pc, #224]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004894:	4b33      	ldr	r3, [pc, #204]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	4930      	ldr	r1, [pc, #192]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048b2:	4b2c      	ldr	r3, [pc, #176]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	4929      	ldr	r1, [pc, #164]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048d0:	4b24      	ldr	r3, [pc, #144]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	4921      	ldr	r1, [pc, #132]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048ee:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	491a      	ldr	r1, [pc, #104]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800490c:	4b15      	ldr	r3, [pc, #84]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	4912      	ldr	r1, [pc, #72]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800491a:	4313      	orrs	r3, r2
 800491c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800492a:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	490b      	ldr	r1, [pc, #44]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004938:	4313      	orrs	r3, r2
 800493a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	4903      	ldr	r1, [pc, #12]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3748      	adds	r7, #72	; 0x48
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40021000 	.word	0x40021000

08004968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e09d      	b.n	8004ab6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d108      	bne.n	8004994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800498a:	d009      	beq.n	80049a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	61da      	str	r2, [r3, #28]
 8004992:	e005      	b.n	80049a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fc fb50 	bl	8001060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049e0:	d902      	bls.n	80049e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e002      	b.n	80049ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049f6:	d007      	beq.n	8004a08 <HAL_SPI_Init+0xa0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a00:	d002      	beq.n	8004a08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	ea42 0103 	orr.w	r1, r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	0c1b      	lsrs	r3, r3, #16
 8004a64:	f003 0204 	and.w	r2, r3, #4
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a84:	ea42 0103 	orr.w	r1, r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e049      	b.n	8004b64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7fc fafd 	bl	80010e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f000 fb9b 	bl	8005238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <HAL_TIM_PWM_Start+0x24>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e03c      	b.n	8004c0a <HAL_TIM_PWM_Start+0x9e>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d109      	bne.n	8004baa <HAL_TIM_PWM_Start+0x3e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	bf14      	ite	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	2300      	moveq	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	e02f      	b.n	8004c0a <HAL_TIM_PWM_Start+0x9e>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d109      	bne.n	8004bc4 <HAL_TIM_PWM_Start+0x58>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e022      	b.n	8004c0a <HAL_TIM_PWM_Start+0x9e>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d109      	bne.n	8004bde <HAL_TIM_PWM_Start+0x72>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	bf14      	ite	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	2300      	moveq	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	e015      	b.n	8004c0a <HAL_TIM_PWM_Start+0x9e>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d109      	bne.n	8004bf8 <HAL_TIM_PWM_Start+0x8c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e008      	b.n	8004c0a <HAL_TIM_PWM_Start+0x9e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e097      	b.n	8004d42 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_PWM_Start+0xb6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c20:	e023      	b.n	8004c6a <HAL_TIM_PWM_Start+0xfe>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_PWM_Start+0xc6>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c30:	e01b      	b.n	8004c6a <HAL_TIM_PWM_Start+0xfe>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_PWM_Start+0xd6>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c40:	e013      	b.n	8004c6a <HAL_TIM_PWM_Start+0xfe>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d104      	bne.n	8004c52 <HAL_TIM_PWM_Start+0xe6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c50:	e00b      	b.n	8004c6a <HAL_TIM_PWM_Start+0xfe>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d104      	bne.n	8004c62 <HAL_TIM_PWM_Start+0xf6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c60:	e003      	b.n	8004c6a <HAL_TIM_PWM_Start+0xfe>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2202      	movs	r2, #2
 8004c66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	6839      	ldr	r1, [r7, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fe46 	bl	8005904 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a33      	ldr	r2, [pc, #204]	; (8004d4c <HAL_TIM_PWM_Start+0x1e0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_TIM_PWM_Start+0x13e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a32      	ldr	r2, [pc, #200]	; (8004d50 <HAL_TIM_PWM_Start+0x1e4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_TIM_PWM_Start+0x13e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <HAL_TIM_PWM_Start+0x1e8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_TIM_PWM_Start+0x13e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2f      	ldr	r2, [pc, #188]	; (8004d58 <HAL_TIM_PWM_Start+0x1ec>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_TIM_PWM_Start+0x13e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2d      	ldr	r2, [pc, #180]	; (8004d5c <HAL_TIM_PWM_Start+0x1f0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_PWM_Start+0x142>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <HAL_TIM_PWM_Start+0x144>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <HAL_TIM_PWM_Start+0x1e0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d018      	beq.n	8004d00 <HAL_TIM_PWM_Start+0x194>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd6:	d013      	beq.n	8004d00 <HAL_TIM_PWM_Start+0x194>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <HAL_TIM_PWM_Start+0x1f4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00e      	beq.n	8004d00 <HAL_TIM_PWM_Start+0x194>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <HAL_TIM_PWM_Start+0x1f8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d009      	beq.n	8004d00 <HAL_TIM_PWM_Start+0x194>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <HAL_TIM_PWM_Start+0x1e4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <HAL_TIM_PWM_Start+0x194>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <HAL_TIM_PWM_Start+0x1e8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d115      	bne.n	8004d2c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <HAL_TIM_PWM_Start+0x1fc>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b06      	cmp	r3, #6
 8004d10:	d015      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x1d2>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d18:	d011      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2a:	e008      	b.n	8004d3e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e000      	b.n	8004d40 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40013400 	.word	0x40013400
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40014400 	.word	0x40014400
 8004d5c:	40014800 	.word	0x40014800
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	00010007 	.word	0x00010007

08004d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d122      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0202 	mvn.w	r2, #2
 8004d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa24 	bl	80051fc <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fa16 	bl	80051e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fa27 	bl	8005210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d122      	bne.n	8004e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d11b      	bne.n	8004e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0204 	mvn.w	r2, #4
 8004dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f9fa 	bl	80051fc <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f9ec 	bl	80051e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f9fd 	bl	8005210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d122      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d11b      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0208 	mvn.w	r2, #8
 8004e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2204      	movs	r2, #4
 8004e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f9d0 	bl	80051fc <HAL_TIM_IC_CaptureCallback>
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f9c2 	bl	80051e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f9d3 	bl	8005210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b10      	cmp	r3, #16
 8004e7c:	d122      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d11b      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0210 	mvn.w	r2, #16
 8004e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f9a6 	bl	80051fc <HAL_TIM_IC_CaptureCallback>
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f998 	bl	80051e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f9a9 	bl	8005210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d10e      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d107      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0201 	mvn.w	r2, #1
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f972 	bl	80051d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b80      	cmp	r3, #128	; 0x80
 8004efc:	d10e      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f08:	2b80      	cmp	r3, #128	; 0x80
 8004f0a:	d107      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fda4 	bl	8005a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2a:	d10e      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f36:	2b80      	cmp	r3, #128	; 0x80
 8004f38:	d107      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fd97 	bl	8005a78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d10e      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d107      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f957 	bl	8005224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d10e      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d107      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0220 	mvn.w	r2, #32
 8004f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fd57 	bl	8005a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e0ff      	b.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b14      	cmp	r3, #20
 8004fd6:	f200 80f0 	bhi.w	80051ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08005035 	.word	0x08005035
 8004fe4:	080051bb 	.word	0x080051bb
 8004fe8:	080051bb 	.word	0x080051bb
 8004fec:	080051bb 	.word	0x080051bb
 8004ff0:	08005075 	.word	0x08005075
 8004ff4:	080051bb 	.word	0x080051bb
 8004ff8:	080051bb 	.word	0x080051bb
 8004ffc:	080051bb 	.word	0x080051bb
 8005000:	080050b7 	.word	0x080050b7
 8005004:	080051bb 	.word	0x080051bb
 8005008:	080051bb 	.word	0x080051bb
 800500c:	080051bb 	.word	0x080051bb
 8005010:	080050f7 	.word	0x080050f7
 8005014:	080051bb 	.word	0x080051bb
 8005018:	080051bb 	.word	0x080051bb
 800501c:	080051bb 	.word	0x080051bb
 8005020:	08005139 	.word	0x08005139
 8005024:	080051bb 	.word	0x080051bb
 8005028:	080051bb 	.word	0x080051bb
 800502c:	080051bb 	.word	0x080051bb
 8005030:	08005179 	.word	0x08005179
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f98c 	bl	8005358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0208 	orr.w	r2, r2, #8
 800504e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0204 	bic.w	r2, r2, #4
 800505e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6999      	ldr	r1, [r3, #24]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	619a      	str	r2, [r3, #24]
      break;
 8005072:	e0a5      	b.n	80051c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 f9fc 	bl	8005478 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800508e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6999      	ldr	r1, [r3, #24]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	021a      	lsls	r2, r3, #8
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	619a      	str	r2, [r3, #24]
      break;
 80050b4:	e084      	b.n	80051c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fa65 	bl	800558c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0208 	orr.w	r2, r2, #8
 80050d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0204 	bic.w	r2, r2, #4
 80050e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69d9      	ldr	r1, [r3, #28]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	61da      	str	r2, [r3, #28]
      break;
 80050f4:	e064      	b.n	80051c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68b9      	ldr	r1, [r7, #8]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 facd 	bl	800569c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69d9      	ldr	r1, [r3, #28]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	021a      	lsls	r2, r3, #8
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	61da      	str	r2, [r3, #28]
      break;
 8005136:	e043      	b.n	80051c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fb16 	bl	8005770 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0208 	orr.w	r2, r2, #8
 8005152:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0204 	bic.w	r2, r2, #4
 8005162:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005176:	e023      	b.n	80051c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fb5a 	bl	8005838 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005192:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	021a      	lsls	r2, r3, #8
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051b8:	e002      	b.n	80051c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
      break;
 80051be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop

080051d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a3c      	ldr	r2, [pc, #240]	; (800533c <TIM_Base_SetConfig+0x104>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00f      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005256:	d00b      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a39      	ldr	r2, [pc, #228]	; (8005340 <TIM_Base_SetConfig+0x108>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a38      	ldr	r2, [pc, #224]	; (8005344 <TIM_Base_SetConfig+0x10c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a37      	ldr	r2, [pc, #220]	; (8005348 <TIM_Base_SetConfig+0x110>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d108      	bne.n	8005282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a2d      	ldr	r2, [pc, #180]	; (800533c <TIM_Base_SetConfig+0x104>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01b      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005290:	d017      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <TIM_Base_SetConfig+0x108>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a29      	ldr	r2, [pc, #164]	; (8005344 <TIM_Base_SetConfig+0x10c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00f      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a28      	ldr	r2, [pc, #160]	; (8005348 <TIM_Base_SetConfig+0x110>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00b      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a27      	ldr	r2, [pc, #156]	; (800534c <TIM_Base_SetConfig+0x114>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d007      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a26      	ldr	r2, [pc, #152]	; (8005350 <TIM_Base_SetConfig+0x118>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a25      	ldr	r2, [pc, #148]	; (8005354 <TIM_Base_SetConfig+0x11c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d108      	bne.n	80052d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a10      	ldr	r2, [pc, #64]	; (800533c <TIM_Base_SetConfig+0x104>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00f      	beq.n	8005320 <TIM_Base_SetConfig+0xe8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a11      	ldr	r2, [pc, #68]	; (8005348 <TIM_Base_SetConfig+0x110>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00b      	beq.n	8005320 <TIM_Base_SetConfig+0xe8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a10      	ldr	r2, [pc, #64]	; (800534c <TIM_Base_SetConfig+0x114>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d007      	beq.n	8005320 <TIM_Base_SetConfig+0xe8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a0f      	ldr	r2, [pc, #60]	; (8005350 <TIM_Base_SetConfig+0x118>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_Base_SetConfig+0xe8>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <TIM_Base_SetConfig+0x11c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d103      	bne.n	8005328 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	615a      	str	r2, [r3, #20]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40013400 	.word	0x40013400
 800534c:	40014000 	.word	0x40014000
 8005350:	40014400 	.word	0x40014400
 8005354:	40014800 	.word	0x40014800

08005358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f023 0201 	bic.w	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0303 	bic.w	r3, r3, #3
 8005392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f023 0302 	bic.w	r3, r3, #2
 80053a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a2c      	ldr	r2, [pc, #176]	; (8005464 <TIM_OC1_SetConfig+0x10c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00f      	beq.n	80053d8 <TIM_OC1_SetConfig+0x80>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a2b      	ldr	r2, [pc, #172]	; (8005468 <TIM_OC1_SetConfig+0x110>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00b      	beq.n	80053d8 <TIM_OC1_SetConfig+0x80>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a2a      	ldr	r2, [pc, #168]	; (800546c <TIM_OC1_SetConfig+0x114>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d007      	beq.n	80053d8 <TIM_OC1_SetConfig+0x80>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a29      	ldr	r2, [pc, #164]	; (8005470 <TIM_OC1_SetConfig+0x118>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_OC1_SetConfig+0x80>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a28      	ldr	r2, [pc, #160]	; (8005474 <TIM_OC1_SetConfig+0x11c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d10c      	bne.n	80053f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0308 	bic.w	r3, r3, #8
 80053de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f023 0304 	bic.w	r3, r3, #4
 80053f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1b      	ldr	r2, [pc, #108]	; (8005464 <TIM_OC1_SetConfig+0x10c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00f      	beq.n	800541a <TIM_OC1_SetConfig+0xc2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <TIM_OC1_SetConfig+0x110>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00b      	beq.n	800541a <TIM_OC1_SetConfig+0xc2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a19      	ldr	r2, [pc, #100]	; (800546c <TIM_OC1_SetConfig+0x114>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_OC1_SetConfig+0xc2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a18      	ldr	r2, [pc, #96]	; (8005470 <TIM_OC1_SetConfig+0x118>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC1_SetConfig+0xc2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a17      	ldr	r2, [pc, #92]	; (8005474 <TIM_OC1_SetConfig+0x11c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d111      	bne.n	800543e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	621a      	str	r2, [r3, #32]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40013400 	.word	0x40013400
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f023 0210 	bic.w	r2, r3, #16
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0320 	bic.w	r3, r3, #32
 80054c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a28      	ldr	r2, [pc, #160]	; (8005578 <TIM_OC2_SetConfig+0x100>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC2_SetConfig+0x6c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a27      	ldr	r2, [pc, #156]	; (800557c <TIM_OC2_SetConfig+0x104>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10d      	bne.n	8005500 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <TIM_OC2_SetConfig+0x100>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00f      	beq.n	8005528 <TIM_OC2_SetConfig+0xb0>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a1c      	ldr	r2, [pc, #112]	; (800557c <TIM_OC2_SetConfig+0x104>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00b      	beq.n	8005528 <TIM_OC2_SetConfig+0xb0>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <TIM_OC2_SetConfig+0x108>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d007      	beq.n	8005528 <TIM_OC2_SetConfig+0xb0>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a1a      	ldr	r2, [pc, #104]	; (8005584 <TIM_OC2_SetConfig+0x10c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_OC2_SetConfig+0xb0>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a19      	ldr	r2, [pc, #100]	; (8005588 <TIM_OC2_SetConfig+0x110>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d113      	bne.n	8005550 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800552e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005536:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40013400 	.word	0x40013400
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800

0800558c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a27      	ldr	r2, [pc, #156]	; (8005688 <TIM_OC3_SetConfig+0xfc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_OC3_SetConfig+0x6a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a26      	ldr	r2, [pc, #152]	; (800568c <TIM_OC3_SetConfig+0x100>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d10d      	bne.n	8005612 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005610:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <TIM_OC3_SetConfig+0xfc>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00f      	beq.n	800563a <TIM_OC3_SetConfig+0xae>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a1b      	ldr	r2, [pc, #108]	; (800568c <TIM_OC3_SetConfig+0x100>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00b      	beq.n	800563a <TIM_OC3_SetConfig+0xae>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a1a      	ldr	r2, [pc, #104]	; (8005690 <TIM_OC3_SetConfig+0x104>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d007      	beq.n	800563a <TIM_OC3_SetConfig+0xae>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a19      	ldr	r2, [pc, #100]	; (8005694 <TIM_OC3_SetConfig+0x108>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_OC3_SetConfig+0xae>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a18      	ldr	r2, [pc, #96]	; (8005698 <TIM_OC3_SetConfig+0x10c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d113      	bne.n	8005662 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	621a      	str	r2, [r3, #32]
}
 800567c:	bf00      	nop
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	40012c00 	.word	0x40012c00
 800568c:	40013400 	.word	0x40013400
 8005690:	40014000 	.word	0x40014000
 8005694:	40014400 	.word	0x40014400
 8005698:	40014800 	.word	0x40014800

0800569c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	031b      	lsls	r3, r3, #12
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a18      	ldr	r2, [pc, #96]	; (800575c <TIM_OC4_SetConfig+0xc0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00f      	beq.n	8005720 <TIM_OC4_SetConfig+0x84>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a17      	ldr	r2, [pc, #92]	; (8005760 <TIM_OC4_SetConfig+0xc4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00b      	beq.n	8005720 <TIM_OC4_SetConfig+0x84>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a16      	ldr	r2, [pc, #88]	; (8005764 <TIM_OC4_SetConfig+0xc8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_OC4_SetConfig+0x84>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <TIM_OC4_SetConfig+0xcc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_OC4_SetConfig+0x84>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a14      	ldr	r2, [pc, #80]	; (800576c <TIM_OC4_SetConfig+0xd0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d109      	bne.n	8005734 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	019b      	lsls	r3, r3, #6
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	621a      	str	r2, [r3, #32]
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40013400 	.word	0x40013400
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400
 800576c:	40014800 	.word	0x40014800

08005770 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a17      	ldr	r2, [pc, #92]	; (8005824 <TIM_OC5_SetConfig+0xb4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00f      	beq.n	80057ea <TIM_OC5_SetConfig+0x7a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a16      	ldr	r2, [pc, #88]	; (8005828 <TIM_OC5_SetConfig+0xb8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00b      	beq.n	80057ea <TIM_OC5_SetConfig+0x7a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a15      	ldr	r2, [pc, #84]	; (800582c <TIM_OC5_SetConfig+0xbc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d007      	beq.n	80057ea <TIM_OC5_SetConfig+0x7a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a14      	ldr	r2, [pc, #80]	; (8005830 <TIM_OC5_SetConfig+0xc0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <TIM_OC5_SetConfig+0x7a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a13      	ldr	r2, [pc, #76]	; (8005834 <TIM_OC5_SetConfig+0xc4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d109      	bne.n	80057fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	621a      	str	r2, [r3, #32]
}
 8005818:	bf00      	nop
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40013400 	.word	0x40013400
 800582c:	40014000 	.word	0x40014000
 8005830:	40014400 	.word	0x40014400
 8005834:	40014800 	.word	0x40014800

08005838 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800587e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	051b      	lsls	r3, r3, #20
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a18      	ldr	r2, [pc, #96]	; (80058f0 <TIM_OC6_SetConfig+0xb8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00f      	beq.n	80058b4 <TIM_OC6_SetConfig+0x7c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <TIM_OC6_SetConfig+0xbc>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00b      	beq.n	80058b4 <TIM_OC6_SetConfig+0x7c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <TIM_OC6_SetConfig+0xc0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_OC6_SetConfig+0x7c>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a15      	ldr	r2, [pc, #84]	; (80058fc <TIM_OC6_SetConfig+0xc4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_OC6_SetConfig+0x7c>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a14      	ldr	r2, [pc, #80]	; (8005900 <TIM_OC6_SetConfig+0xc8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d109      	bne.n	80058c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	029b      	lsls	r3, r3, #10
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	621a      	str	r2, [r3, #32]
}
 80058e2:	bf00      	nop
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40013400 	.word	0x40013400
 80058f8:	40014000 	.word	0x40014000
 80058fc:	40014400 	.word	0x40014400
 8005900:	40014800 	.word	0x40014800

08005904 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 031f 	and.w	r3, r3, #31
 8005916:	2201      	movs	r2, #1
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a1a      	ldr	r2, [r3, #32]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	43db      	mvns	r3, r3
 8005926:	401a      	ands	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a1a      	ldr	r2, [r3, #32]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	fa01 f303 	lsl.w	r3, r1, r3
 800593c:	431a      	orrs	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	621a      	str	r2, [r3, #32]
}
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
	...

08005950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005964:	2302      	movs	r3, #2
 8005966:	e063      	b.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2b      	ldr	r2, [pc, #172]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2a      	ldr	r2, [pc, #168]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d108      	bne.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1b      	ldr	r2, [pc, #108]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d018      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059da:	d013      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00e      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d009      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a12      	ldr	r2, [pc, #72]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d10c      	bne.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40013400 	.word	0x40013400
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40014000 	.word	0x40014000

08005a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005a98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	4013      	ands	r3, r2
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	f107 0014 	add.w	r0, r7, #20
 8005ad0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	b004      	add	sp, #16
 8005b02:	4770      	bx	lr

08005b04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b16:	2b84      	cmp	r3, #132	; 0x84
 8005b18:	d005      	beq.n	8005b26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005b1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	3303      	adds	r3, #3
 8005b24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005b26:	68fb      	ldr	r3, [r7, #12]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005b38:	f000 fad6 	bl	80060e8 <vTaskStartScheduler>
  
  return osOK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b44:	b089      	sub	sp, #36	; 0x24
 8005b46:	af04      	add	r7, sp, #16
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d020      	beq.n	8005b96 <osThreadCreate+0x54>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01c      	beq.n	8005b96 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685c      	ldr	r4, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681d      	ldr	r5, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691e      	ldr	r6, [r3, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff ffc8 	bl	8005b04 <makeFreeRtosPriority>
 8005b74:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b7e:	9202      	str	r2, [sp, #8]
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	9100      	str	r1, [sp, #0]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	4632      	mov	r2, r6
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f000 f8ed 	bl	8005d6a <xTaskCreateStatic>
 8005b90:	4603      	mov	r3, r0
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e01c      	b.n	8005bd0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685c      	ldr	r4, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ba2:	b29e      	uxth	r6, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff ffaa 	bl	8005b04 <makeFreeRtosPriority>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	f107 030c 	add.w	r3, r7, #12
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	9200      	str	r2, [sp, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	4632      	mov	r2, r6
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 f92e 	bl	8005e22 <xTaskCreate>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d001      	beq.n	8005bd0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e000      	b.n	8005bd2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bda <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <osDelay+0x16>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	e000      	b.n	8005bf2 <osDelay+0x18>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fa44 	bl	8006080 <vTaskDelay>
  
  return osOK;
 8005bf8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f103 0208 	add.w	r2, r3, #8
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f103 0208 	add.w	r2, r3, #8
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f103 0208 	add.w	r2, r3, #8
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cba:	d103      	bne.n	8005cc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	e00c      	b.n	8005cde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	e002      	b.n	8005cd2 <vListInsert+0x2e>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d2f6      	bcs.n	8005ccc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	601a      	str	r2, [r3, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6892      	ldr	r2, [r2, #8]
 8005d2c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6852      	ldr	r2, [r2, #4]
 8005d36:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d103      	bne.n	8005d4a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	1e5a      	subs	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b08e      	sub	sp, #56	; 0x38
 8005d6e:	af04      	add	r7, sp, #16
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d90:	bf00      	nop
 8005d92:	e7fe      	b.n	8005d92 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <xTaskCreateStatic+0x46>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	61fb      	str	r3, [r7, #28]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005db0:	2354      	movs	r3, #84	; 0x54
 8005db2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b54      	cmp	r3, #84	; 0x54
 8005db8:	d00a      	beq.n	8005dd0 <xTaskCreateStatic+0x66>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	61bb      	str	r3, [r7, #24]
}
 8005dcc:	bf00      	nop
 8005dce:	e7fe      	b.n	8005dce <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01e      	beq.n	8005e14 <xTaskCreateStatic+0xaa>
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d01b      	beq.n	8005e14 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	2202      	movs	r2, #2
 8005dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005dee:	2300      	movs	r3, #0
 8005df0:	9303      	str	r3, [sp, #12]
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	9302      	str	r3, [sp, #8]
 8005df6:	f107 0314 	add.w	r3, r7, #20
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 f850 	bl	8005eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e0e:	f000 f8cd 	bl	8005fac <prvAddNewTaskToReadyList>
 8005e12:	e001      	b.n	8005e18 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e18:	697b      	ldr	r3, [r7, #20]
	}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3728      	adds	r7, #40	; 0x28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b08c      	sub	sp, #48	; 0x30
 8005e26:	af04      	add	r7, sp, #16
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	603b      	str	r3, [r7, #0]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fee6 	bl	8006c08 <pvPortMalloc>
 8005e3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00e      	beq.n	8005e62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e44:	2054      	movs	r0, #84	; 0x54
 8005e46:	f000 fedf 	bl	8006c08 <pvPortMalloc>
 8005e4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
 8005e58:	e005      	b.n	8005e66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e5a:	6978      	ldr	r0, [r7, #20]
 8005e5c:	f000 ff98 	bl	8006d90 <vPortFree>
 8005e60:	e001      	b.n	8005e66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d017      	beq.n	8005e9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e74:	88fa      	ldrh	r2, [r7, #6]
 8005e76:	2300      	movs	r3, #0
 8005e78:	9303      	str	r3, [sp, #12]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	9302      	str	r3, [sp, #8]
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 f80e 	bl	8005eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e90:	69f8      	ldr	r0, [r7, #28]
 8005e92:	f000 f88b 	bl	8005fac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e96:	2301      	movs	r3, #1
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	e002      	b.n	8005ea2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	f023 0307 	bic.w	r3, r3, #7
 8005ed2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	617b      	str	r3, [r7, #20]
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	e012      	b.n	8005f20 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	7819      	ldrb	r1, [r3, #0]
 8005f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	3334      	adds	r3, #52	; 0x34
 8005f0a:	460a      	mov	r2, r1
 8005f0c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d006      	beq.n	8005f28 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b0f      	cmp	r3, #15
 8005f24:	d9e9      	bls.n	8005efa <prvInitialiseNewTask+0x4e>
 8005f26:	e000      	b.n	8005f2a <prvInitialiseNewTask+0x7e>
		{
			break;
 8005f28:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	2b06      	cmp	r3, #6
 8005f36:	d901      	bls.n	8005f3c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f38:	2306      	movs	r3, #6
 8005f3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f46:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	3304      	adds	r3, #4
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fe75 	bl	8005c42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	3318      	adds	r3, #24
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fe70 	bl	8005c42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	f1c3 0207 	rsb	r2, r3, #7
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	68f9      	ldr	r1, [r7, #12]
 8005f8a:	69b8      	ldr	r0, [r7, #24]
 8005f8c:	f000 fc30 	bl	80067f0 <pxPortInitialiseStack>
 8005f90:	4602      	mov	r2, r0
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa2:	bf00      	nop
 8005fa4:	3720      	adds	r7, #32
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fb4:	f000 fd46 	bl	8006a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fb8:	4b2a      	ldr	r3, [pc, #168]	; (8006064 <prvAddNewTaskToReadyList+0xb8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	4a29      	ldr	r2, [pc, #164]	; (8006064 <prvAddNewTaskToReadyList+0xb8>)
 8005fc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fc2:	4b29      	ldr	r3, [pc, #164]	; (8006068 <prvAddNewTaskToReadyList+0xbc>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fca:	4a27      	ldr	r2, [pc, #156]	; (8006068 <prvAddNewTaskToReadyList+0xbc>)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fd0:	4b24      	ldr	r3, [pc, #144]	; (8006064 <prvAddNewTaskToReadyList+0xb8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d110      	bne.n	8005ffa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fd8:	f000 fac2 	bl	8006560 <prvInitialiseTaskLists>
 8005fdc:	e00d      	b.n	8005ffa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fde:	4b23      	ldr	r3, [pc, #140]	; (800606c <prvAddNewTaskToReadyList+0xc0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fe6:	4b20      	ldr	r3, [pc, #128]	; (8006068 <prvAddNewTaskToReadyList+0xbc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d802      	bhi.n	8005ffa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ff4:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <prvAddNewTaskToReadyList+0xbc>)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ffa:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <prvAddNewTaskToReadyList+0xc4>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3301      	adds	r3, #1
 8006000:	4a1b      	ldr	r2, [pc, #108]	; (8006070 <prvAddNewTaskToReadyList+0xc4>)
 8006002:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	2201      	movs	r2, #1
 800600a:	409a      	lsls	r2, r3
 800600c:	4b19      	ldr	r3, [pc, #100]	; (8006074 <prvAddNewTaskToReadyList+0xc8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4313      	orrs	r3, r2
 8006012:	4a18      	ldr	r2, [pc, #96]	; (8006074 <prvAddNewTaskToReadyList+0xc8>)
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4a15      	ldr	r2, [pc, #84]	; (8006078 <prvAddNewTaskToReadyList+0xcc>)
 8006024:	441a      	add	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3304      	adds	r3, #4
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f7ff fe15 	bl	8005c5c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006032:	f000 fd37 	bl	8006aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006036:	4b0d      	ldr	r3, [pc, #52]	; (800606c <prvAddNewTaskToReadyList+0xc0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00e      	beq.n	800605c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800603e:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <prvAddNewTaskToReadyList+0xbc>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	429a      	cmp	r2, r3
 800604a:	d207      	bcs.n	800605c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <prvAddNewTaskToReadyList+0xd0>)
 800604e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	20000910 	.word	0x20000910
 8006068:	20000810 	.word	0x20000810
 800606c:	2000091c 	.word	0x2000091c
 8006070:	2000092c 	.word	0x2000092c
 8006074:	20000918 	.word	0x20000918
 8006078:	20000814 	.word	0x20000814
 800607c:	e000ed04 	.word	0xe000ed04

08006080 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006088:	2300      	movs	r3, #0
 800608a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d017      	beq.n	80060c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006092:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <vTaskDelay+0x60>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <vTaskDelay+0x30>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	60bb      	str	r3, [r7, #8]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060b0:	f000 f87a 	bl	80061a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060b4:	2100      	movs	r1, #0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fb34 	bl	8006724 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060bc:	f000 f882 	bl	80061c4 <xTaskResumeAll>
 80060c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060c8:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <vTaskDelay+0x64>)
 80060ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060d8:	bf00      	nop
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20000938 	.word	0x20000938
 80060e4:	e000ed04 	.word	0xe000ed04

080060e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	; 0x28
 80060ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060f6:	463a      	mov	r2, r7
 80060f8:	1d39      	adds	r1, r7, #4
 80060fa:	f107 0308 	add.w	r3, r7, #8
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fa f964 	bl	80003cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	9202      	str	r2, [sp, #8]
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	2300      	movs	r3, #0
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	2300      	movs	r3, #0
 8006114:	460a      	mov	r2, r1
 8006116:	491e      	ldr	r1, [pc, #120]	; (8006190 <vTaskStartScheduler+0xa8>)
 8006118:	481e      	ldr	r0, [pc, #120]	; (8006194 <vTaskStartScheduler+0xac>)
 800611a:	f7ff fe26 	bl	8005d6a <xTaskCreateStatic>
 800611e:	4603      	mov	r3, r0
 8006120:	4a1d      	ldr	r2, [pc, #116]	; (8006198 <vTaskStartScheduler+0xb0>)
 8006122:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006124:	4b1c      	ldr	r3, [pc, #112]	; (8006198 <vTaskStartScheduler+0xb0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800612c:	2301      	movs	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	e001      	b.n	8006136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006132:	2300      	movs	r3, #0
 8006134:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d116      	bne.n	800616a <vTaskStartScheduler+0x82>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	613b      	str	r3, [r7, #16]
}
 800614e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006150:	4b12      	ldr	r3, [pc, #72]	; (800619c <vTaskStartScheduler+0xb4>)
 8006152:	f04f 32ff 	mov.w	r2, #4294967295
 8006156:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006158:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <vTaskStartScheduler+0xb8>)
 800615a:	2201      	movs	r2, #1
 800615c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800615e:	4b11      	ldr	r3, [pc, #68]	; (80061a4 <vTaskStartScheduler+0xbc>)
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006164:	f000 fbcc 	bl	8006900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006168:	e00e      	b.n	8006188 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d10a      	bne.n	8006188 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	60fb      	str	r3, [r7, #12]
}
 8006184:	bf00      	nop
 8006186:	e7fe      	b.n	8006186 <vTaskStartScheduler+0x9e>
}
 8006188:	bf00      	nop
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	08007064 	.word	0x08007064
 8006194:	08006531 	.word	0x08006531
 8006198:	20000934 	.word	0x20000934
 800619c:	20000930 	.word	0x20000930
 80061a0:	2000091c 	.word	0x2000091c
 80061a4:	20000914 	.word	0x20000914

080061a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061ac:	4b04      	ldr	r3, [pc, #16]	; (80061c0 <vTaskSuspendAll+0x18>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3301      	adds	r3, #1
 80061b2:	4a03      	ldr	r2, [pc, #12]	; (80061c0 <vTaskSuspendAll+0x18>)
 80061b4:	6013      	str	r3, [r2, #0]
}
 80061b6:	bf00      	nop
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	20000938 	.word	0x20000938

080061c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061d2:	4b41      	ldr	r3, [pc, #260]	; (80062d8 <xTaskResumeAll+0x114>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10a      	bne.n	80061f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	603b      	str	r3, [r7, #0]
}
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061f0:	f000 fc28 	bl	8006a44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061f4:	4b38      	ldr	r3, [pc, #224]	; (80062d8 <xTaskResumeAll+0x114>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	4a37      	ldr	r2, [pc, #220]	; (80062d8 <xTaskResumeAll+0x114>)
 80061fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061fe:	4b36      	ldr	r3, [pc, #216]	; (80062d8 <xTaskResumeAll+0x114>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d161      	bne.n	80062ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006206:	4b35      	ldr	r3, [pc, #212]	; (80062dc <xTaskResumeAll+0x118>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d05d      	beq.n	80062ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800620e:	e02e      	b.n	800626e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006210:	4b33      	ldr	r3, [pc, #204]	; (80062e0 <xTaskResumeAll+0x11c>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3318      	adds	r3, #24
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fd7a 	bl	8005d16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3304      	adds	r3, #4
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff fd75 	bl	8005d16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	2201      	movs	r2, #1
 8006232:	409a      	lsls	r2, r3
 8006234:	4b2b      	ldr	r3, [pc, #172]	; (80062e4 <xTaskResumeAll+0x120>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4313      	orrs	r3, r2
 800623a:	4a2a      	ldr	r2, [pc, #168]	; (80062e4 <xTaskResumeAll+0x120>)
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4a27      	ldr	r2, [pc, #156]	; (80062e8 <xTaskResumeAll+0x124>)
 800624c:	441a      	add	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3304      	adds	r3, #4
 8006252:	4619      	mov	r1, r3
 8006254:	4610      	mov	r0, r2
 8006256:	f7ff fd01 	bl	8005c5c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	4b23      	ldr	r3, [pc, #140]	; (80062ec <xTaskResumeAll+0x128>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	429a      	cmp	r2, r3
 8006266:	d302      	bcc.n	800626e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006268:	4b21      	ldr	r3, [pc, #132]	; (80062f0 <xTaskResumeAll+0x12c>)
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800626e:	4b1c      	ldr	r3, [pc, #112]	; (80062e0 <xTaskResumeAll+0x11c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1cc      	bne.n	8006210 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800627c:	f000 fa0e 	bl	800669c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006280:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <xTaskResumeAll+0x130>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d010      	beq.n	80062ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800628c:	f000 f836 	bl	80062fc <xTaskIncrementTick>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006296:	4b16      	ldr	r3, [pc, #88]	; (80062f0 <xTaskResumeAll+0x12c>)
 8006298:	2201      	movs	r2, #1
 800629a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3b01      	subs	r3, #1
 80062a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f1      	bne.n	800628c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80062a8:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <xTaskResumeAll+0x130>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <xTaskResumeAll+0x12c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d009      	beq.n	80062ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062b6:	2301      	movs	r3, #1
 80062b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062ba:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <xTaskResumeAll+0x134>)
 80062bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062ca:	f000 fbeb 	bl	8006aa4 <vPortExitCritical>

	return xAlreadyYielded;
 80062ce:	68bb      	ldr	r3, [r7, #8]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20000938 	.word	0x20000938
 80062dc:	20000910 	.word	0x20000910
 80062e0:	200008d0 	.word	0x200008d0
 80062e4:	20000918 	.word	0x20000918
 80062e8:	20000814 	.word	0x20000814
 80062ec:	20000810 	.word	0x20000810
 80062f0:	20000924 	.word	0x20000924
 80062f4:	20000920 	.word	0x20000920
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006306:	4b51      	ldr	r3, [pc, #324]	; (800644c <xTaskIncrementTick+0x150>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f040 808d 	bne.w	800642a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006310:	4b4f      	ldr	r3, [pc, #316]	; (8006450 <xTaskIncrementTick+0x154>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006318:	4a4d      	ldr	r2, [pc, #308]	; (8006450 <xTaskIncrementTick+0x154>)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d120      	bne.n	8006366 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006324:	4b4b      	ldr	r3, [pc, #300]	; (8006454 <xTaskIncrementTick+0x158>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <xTaskIncrementTick+0x48>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	603b      	str	r3, [r7, #0]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <xTaskIncrementTick+0x46>
 8006344:	4b43      	ldr	r3, [pc, #268]	; (8006454 <xTaskIncrementTick+0x158>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	4b43      	ldr	r3, [pc, #268]	; (8006458 <xTaskIncrementTick+0x15c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a41      	ldr	r2, [pc, #260]	; (8006454 <xTaskIncrementTick+0x158>)
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	4a41      	ldr	r2, [pc, #260]	; (8006458 <xTaskIncrementTick+0x15c>)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	4b40      	ldr	r3, [pc, #256]	; (800645c <xTaskIncrementTick+0x160>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	4a3f      	ldr	r2, [pc, #252]	; (800645c <xTaskIncrementTick+0x160>)
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	f000 f99b 	bl	800669c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006366:	4b3e      	ldr	r3, [pc, #248]	; (8006460 <xTaskIncrementTick+0x164>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	429a      	cmp	r2, r3
 800636e:	d34d      	bcc.n	800640c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006370:	4b38      	ldr	r3, [pc, #224]	; (8006454 <xTaskIncrementTick+0x158>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <xTaskIncrementTick+0x82>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <xTaskIncrementTick+0x84>
 800637e:	2300      	movs	r3, #0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006384:	4b36      	ldr	r3, [pc, #216]	; (8006460 <xTaskIncrementTick+0x164>)
 8006386:	f04f 32ff 	mov.w	r2, #4294967295
 800638a:	601a      	str	r2, [r3, #0]
					break;
 800638c:	e03e      	b.n	800640c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800638e:	4b31      	ldr	r3, [pc, #196]	; (8006454 <xTaskIncrementTick+0x158>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d203      	bcs.n	80063ae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063a6:	4a2e      	ldr	r2, [pc, #184]	; (8006460 <xTaskIncrementTick+0x164>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6013      	str	r3, [r2, #0]
						break;
 80063ac:	e02e      	b.n	800640c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fcaf 	bl	8005d16 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	3318      	adds	r3, #24
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff fca6 	bl	8005d16 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	2201      	movs	r2, #1
 80063d0:	409a      	lsls	r2, r3
 80063d2:	4b24      	ldr	r3, [pc, #144]	; (8006464 <xTaskIncrementTick+0x168>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	4a22      	ldr	r2, [pc, #136]	; (8006464 <xTaskIncrementTick+0x168>)
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4a1f      	ldr	r2, [pc, #124]	; (8006468 <xTaskIncrementTick+0x16c>)
 80063ea:	441a      	add	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4619      	mov	r1, r3
 80063f2:	4610      	mov	r0, r2
 80063f4:	f7ff fc32 	bl	8005c5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	4b1b      	ldr	r3, [pc, #108]	; (800646c <xTaskIncrementTick+0x170>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	429a      	cmp	r2, r3
 8006404:	d3b4      	bcc.n	8006370 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006406:	2301      	movs	r3, #1
 8006408:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800640a:	e7b1      	b.n	8006370 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800640c:	4b17      	ldr	r3, [pc, #92]	; (800646c <xTaskIncrementTick+0x170>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006412:	4915      	ldr	r1, [pc, #84]	; (8006468 <xTaskIncrementTick+0x16c>)
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d907      	bls.n	8006434 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006424:	2301      	movs	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e004      	b.n	8006434 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800642a:	4b11      	ldr	r3, [pc, #68]	; (8006470 <xTaskIncrementTick+0x174>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3301      	adds	r3, #1
 8006430:	4a0f      	ldr	r2, [pc, #60]	; (8006470 <xTaskIncrementTick+0x174>)
 8006432:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006434:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <xTaskIncrementTick+0x178>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800643c:	2301      	movs	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006440:	697b      	ldr	r3, [r7, #20]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000938 	.word	0x20000938
 8006450:	20000914 	.word	0x20000914
 8006454:	200008c8 	.word	0x200008c8
 8006458:	200008cc 	.word	0x200008cc
 800645c:	20000928 	.word	0x20000928
 8006460:	20000930 	.word	0x20000930
 8006464:	20000918 	.word	0x20000918
 8006468:	20000814 	.word	0x20000814
 800646c:	20000810 	.word	0x20000810
 8006470:	20000920 	.word	0x20000920
 8006474:	20000924 	.word	0x20000924

08006478 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800647e:	4b27      	ldr	r3, [pc, #156]	; (800651c <vTaskSwitchContext+0xa4>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006486:	4b26      	ldr	r3, [pc, #152]	; (8006520 <vTaskSwitchContext+0xa8>)
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800648c:	e03f      	b.n	800650e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800648e:	4b24      	ldr	r3, [pc, #144]	; (8006520 <vTaskSwitchContext+0xa8>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006494:	4b23      	ldr	r3, [pc, #140]	; (8006524 <vTaskSwitchContext+0xac>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	fab3 f383 	clz	r3, r3
 80064a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80064a2:	7afb      	ldrb	r3, [r7, #11]
 80064a4:	f1c3 031f 	rsb	r3, r3, #31
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	491f      	ldr	r1, [pc, #124]	; (8006528 <vTaskSwitchContext+0xb0>)
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	607b      	str	r3, [r7, #4]
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <vTaskSwitchContext+0x5a>
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4a12      	ldr	r2, [pc, #72]	; (8006528 <vTaskSwitchContext+0xb0>)
 80064e0:	4413      	add	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	3308      	adds	r3, #8
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d104      	bne.n	8006504 <vTaskSwitchContext+0x8c>
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	4a08      	ldr	r2, [pc, #32]	; (800652c <vTaskSwitchContext+0xb4>)
 800650c:	6013      	str	r3, [r2, #0]
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20000938 	.word	0x20000938
 8006520:	20000924 	.word	0x20000924
 8006524:	20000918 	.word	0x20000918
 8006528:	20000814 	.word	0x20000814
 800652c:	20000810 	.word	0x20000810

08006530 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006538:	f000 f852 	bl	80065e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800653c:	4b06      	ldr	r3, [pc, #24]	; (8006558 <prvIdleTask+0x28>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d9f9      	bls.n	8006538 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006544:	4b05      	ldr	r3, [pc, #20]	; (800655c <prvIdleTask+0x2c>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006554:	e7f0      	b.n	8006538 <prvIdleTask+0x8>
 8006556:	bf00      	nop
 8006558:	20000814 	.word	0x20000814
 800655c:	e000ed04 	.word	0xe000ed04

08006560 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006566:	2300      	movs	r3, #0
 8006568:	607b      	str	r3, [r7, #4]
 800656a:	e00c      	b.n	8006586 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4a12      	ldr	r2, [pc, #72]	; (80065c0 <prvInitialiseTaskLists+0x60>)
 8006578:	4413      	add	r3, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff fb41 	bl	8005c02 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3301      	adds	r3, #1
 8006584:	607b      	str	r3, [r7, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b06      	cmp	r3, #6
 800658a:	d9ef      	bls.n	800656c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800658c:	480d      	ldr	r0, [pc, #52]	; (80065c4 <prvInitialiseTaskLists+0x64>)
 800658e:	f7ff fb38 	bl	8005c02 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006592:	480d      	ldr	r0, [pc, #52]	; (80065c8 <prvInitialiseTaskLists+0x68>)
 8006594:	f7ff fb35 	bl	8005c02 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006598:	480c      	ldr	r0, [pc, #48]	; (80065cc <prvInitialiseTaskLists+0x6c>)
 800659a:	f7ff fb32 	bl	8005c02 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800659e:	480c      	ldr	r0, [pc, #48]	; (80065d0 <prvInitialiseTaskLists+0x70>)
 80065a0:	f7ff fb2f 	bl	8005c02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065a4:	480b      	ldr	r0, [pc, #44]	; (80065d4 <prvInitialiseTaskLists+0x74>)
 80065a6:	f7ff fb2c 	bl	8005c02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <prvInitialiseTaskLists+0x78>)
 80065ac:	4a05      	ldr	r2, [pc, #20]	; (80065c4 <prvInitialiseTaskLists+0x64>)
 80065ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065b0:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <prvInitialiseTaskLists+0x7c>)
 80065b2:	4a05      	ldr	r2, [pc, #20]	; (80065c8 <prvInitialiseTaskLists+0x68>)
 80065b4:	601a      	str	r2, [r3, #0]
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000814 	.word	0x20000814
 80065c4:	200008a0 	.word	0x200008a0
 80065c8:	200008b4 	.word	0x200008b4
 80065cc:	200008d0 	.word	0x200008d0
 80065d0:	200008e4 	.word	0x200008e4
 80065d4:	200008fc 	.word	0x200008fc
 80065d8:	200008c8 	.word	0x200008c8
 80065dc:	200008cc 	.word	0x200008cc

080065e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065e6:	e019      	b.n	800661c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065e8:	f000 fa2c 	bl	8006a44 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065ec:	4b10      	ldr	r3, [pc, #64]	; (8006630 <prvCheckTasksWaitingTermination+0x50>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fb8c 	bl	8005d16 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065fe:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <prvCheckTasksWaitingTermination+0x54>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3b01      	subs	r3, #1
 8006604:	4a0b      	ldr	r2, [pc, #44]	; (8006634 <prvCheckTasksWaitingTermination+0x54>)
 8006606:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006608:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <prvCheckTasksWaitingTermination+0x58>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3b01      	subs	r3, #1
 800660e:	4a0a      	ldr	r2, [pc, #40]	; (8006638 <prvCheckTasksWaitingTermination+0x58>)
 8006610:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006612:	f000 fa47 	bl	8006aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f810 	bl	800663c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <prvCheckTasksWaitingTermination+0x58>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e1      	bne.n	80065e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	200008e4 	.word	0x200008e4
 8006634:	20000910 	.word	0x20000910
 8006638:	200008f8 	.word	0x200008f8

0800663c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800664a:	2b00      	cmp	r3, #0
 800664c:	d108      	bne.n	8006660 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fb9c 	bl	8006d90 <vPortFree>
				vPortFree( pxTCB );
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fb99 	bl	8006d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800665e:	e018      	b.n	8006692 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006666:	2b01      	cmp	r3, #1
 8006668:	d103      	bne.n	8006672 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fb90 	bl	8006d90 <vPortFree>
	}
 8006670:	e00f      	b.n	8006692 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006678:	2b02      	cmp	r3, #2
 800667a:	d00a      	beq.n	8006692 <prvDeleteTCB+0x56>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	60fb      	str	r3, [r7, #12]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <prvDeleteTCB+0x54>
	}
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a2:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <prvResetNextTaskUnblockTime+0x44>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <prvResetNextTaskUnblockTime+0x14>
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <prvResetNextTaskUnblockTime+0x16>
 80066b0:	2300      	movs	r3, #0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066b6:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <prvResetNextTaskUnblockTime+0x48>)
 80066b8:	f04f 32ff 	mov.w	r2, #4294967295
 80066bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066be:	e008      	b.n	80066d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066c0:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <prvResetNextTaskUnblockTime+0x44>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4a05      	ldr	r2, [pc, #20]	; (80066e4 <prvResetNextTaskUnblockTime+0x48>)
 80066d0:	6013      	str	r3, [r2, #0]
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	200008c8 	.word	0x200008c8
 80066e4:	20000930 	.word	0x20000930

080066e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066ee:	4b0b      	ldr	r3, [pc, #44]	; (800671c <xTaskGetSchedulerState+0x34>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066f6:	2301      	movs	r3, #1
 80066f8:	607b      	str	r3, [r7, #4]
 80066fa:	e008      	b.n	800670e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066fc:	4b08      	ldr	r3, [pc, #32]	; (8006720 <xTaskGetSchedulerState+0x38>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d102      	bne.n	800670a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006704:	2302      	movs	r3, #2
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	e001      	b.n	800670e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800670a:	2300      	movs	r3, #0
 800670c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800670e:	687b      	ldr	r3, [r7, #4]
	}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	2000091c 	.word	0x2000091c
 8006720:	20000938 	.word	0x20000938

08006724 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800672e:	4b29      	ldr	r3, [pc, #164]	; (80067d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006734:	4b28      	ldr	r3, [pc, #160]	; (80067d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3304      	adds	r3, #4
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff faeb 	bl	8005d16 <uxListRemove>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006746:	4b24      	ldr	r3, [pc, #144]	; (80067d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	2201      	movs	r2, #1
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43da      	mvns	r2, r3
 8006754:	4b21      	ldr	r3, [pc, #132]	; (80067dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4013      	ands	r3, r2
 800675a:	4a20      	ldr	r2, [pc, #128]	; (80067dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800675c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d10a      	bne.n	800677c <prvAddCurrentTaskToDelayedList+0x58>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800676c:	4b1a      	ldr	r3, [pc, #104]	; (80067d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3304      	adds	r3, #4
 8006772:	4619      	mov	r1, r3
 8006774:	481a      	ldr	r0, [pc, #104]	; (80067e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006776:	f7ff fa71 	bl	8005c5c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800677a:	e026      	b.n	80067ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4413      	add	r3, r2
 8006782:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006784:	4b14      	ldr	r3, [pc, #80]	; (80067d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	429a      	cmp	r2, r3
 8006792:	d209      	bcs.n	80067a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006794:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3304      	adds	r3, #4
 800679e:	4619      	mov	r1, r3
 80067a0:	4610      	mov	r0, r2
 80067a2:	f7ff fa7f 	bl	8005ca4 <vListInsert>
}
 80067a6:	e010      	b.n	80067ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a8:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7ff fa75 	bl	8005ca4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067ba:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d202      	bcs.n	80067ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80067c4:	4a09      	ldr	r2, [pc, #36]	; (80067ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6013      	str	r3, [r2, #0]
}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000914 	.word	0x20000914
 80067d8:	20000810 	.word	0x20000810
 80067dc:	20000918 	.word	0x20000918
 80067e0:	200008fc 	.word	0x200008fc
 80067e4:	200008cc 	.word	0x200008cc
 80067e8:	200008c8 	.word	0x200008c8
 80067ec:	20000930 	.word	0x20000930

080067f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3b04      	subs	r3, #4
 8006800:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3b04      	subs	r3, #4
 800680e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f023 0201 	bic.w	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3b04      	subs	r3, #4
 800681e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006820:	4a0c      	ldr	r2, [pc, #48]	; (8006854 <pxPortInitialiseStack+0x64>)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3b14      	subs	r3, #20
 800682a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3b04      	subs	r3, #4
 8006836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f06f 0202 	mvn.w	r2, #2
 800683e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3b20      	subs	r3, #32
 8006844:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006846:	68fb      	ldr	r3, [r7, #12]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	08006859 	.word	0x08006859

08006858 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <prvTaskExitError+0x54>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686a:	d00a      	beq.n	8006882 <prvTaskExitError+0x2a>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60fb      	str	r3, [r7, #12]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <prvTaskExitError+0x28>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60bb      	str	r3, [r7, #8]
}
 8006894:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006896:	bf00      	nop
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0fc      	beq.n	8006898 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800689e:	bf00      	nop
 80068a0:	bf00      	nop
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	20000014 	.word	0x20000014

080068b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068b0:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <pxCurrentTCBConst2>)
 80068b2:	6819      	ldr	r1, [r3, #0]
 80068b4:	6808      	ldr	r0, [r1, #0]
 80068b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ba:	f380 8809 	msr	PSP, r0
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f04f 0000 	mov.w	r0, #0
 80068c6:	f380 8811 	msr	BASEPRI, r0
 80068ca:	4770      	bx	lr
 80068cc:	f3af 8000 	nop.w

080068d0 <pxCurrentTCBConst2>:
 80068d0:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop

080068d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068d8:	4808      	ldr	r0, [pc, #32]	; (80068fc <prvPortStartFirstTask+0x24>)
 80068da:	6800      	ldr	r0, [r0, #0]
 80068dc:	6800      	ldr	r0, [r0, #0]
 80068de:	f380 8808 	msr	MSP, r0
 80068e2:	f04f 0000 	mov.w	r0, #0
 80068e6:	f380 8814 	msr	CONTROL, r0
 80068ea:	b662      	cpsie	i
 80068ec:	b661      	cpsie	f
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	df00      	svc	0
 80068f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068fa:	bf00      	nop
 80068fc:	e000ed08 	.word	0xe000ed08

08006900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006906:	4b46      	ldr	r3, [pc, #280]	; (8006a20 <xPortStartScheduler+0x120>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a46      	ldr	r2, [pc, #280]	; (8006a24 <xPortStartScheduler+0x124>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d10a      	bne.n	8006926 <xPortStartScheduler+0x26>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	613b      	str	r3, [r7, #16]
}
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006926:	4b3e      	ldr	r3, [pc, #248]	; (8006a20 <xPortStartScheduler+0x120>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a3f      	ldr	r2, [pc, #252]	; (8006a28 <xPortStartScheduler+0x128>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d10a      	bne.n	8006946 <xPortStartScheduler+0x46>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006946:	4b39      	ldr	r3, [pc, #228]	; (8006a2c <xPortStartScheduler+0x12c>)
 8006948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	22ff      	movs	r2, #255	; 0xff
 8006956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006968:	b2da      	uxtb	r2, r3
 800696a:	4b31      	ldr	r3, [pc, #196]	; (8006a30 <xPortStartScheduler+0x130>)
 800696c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800696e:	4b31      	ldr	r3, [pc, #196]	; (8006a34 <xPortStartScheduler+0x134>)
 8006970:	2207      	movs	r2, #7
 8006972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006974:	e009      	b.n	800698a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006976:	4b2f      	ldr	r3, [pc, #188]	; (8006a34 <xPortStartScheduler+0x134>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3b01      	subs	r3, #1
 800697c:	4a2d      	ldr	r2, [pc, #180]	; (8006a34 <xPortStartScheduler+0x134>)
 800697e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	b2db      	uxtb	r3, r3
 8006988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006992:	2b80      	cmp	r3, #128	; 0x80
 8006994:	d0ef      	beq.n	8006976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006996:	4b27      	ldr	r3, [pc, #156]	; (8006a34 <xPortStartScheduler+0x134>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f1c3 0307 	rsb	r3, r3, #7
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d00a      	beq.n	80069b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	60bb      	str	r3, [r7, #8]
}
 80069b4:	bf00      	nop
 80069b6:	e7fe      	b.n	80069b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069b8:	4b1e      	ldr	r3, [pc, #120]	; (8006a34 <xPortStartScheduler+0x134>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	4a1d      	ldr	r2, [pc, #116]	; (8006a34 <xPortStartScheduler+0x134>)
 80069c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069c2:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <xPortStartScheduler+0x134>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ca:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <xPortStartScheduler+0x134>)
 80069cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069d6:	4b18      	ldr	r3, [pc, #96]	; (8006a38 <xPortStartScheduler+0x138>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a17      	ldr	r2, [pc, #92]	; (8006a38 <xPortStartScheduler+0x138>)
 80069dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <xPortStartScheduler+0x138>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a14      	ldr	r2, [pc, #80]	; (8006a38 <xPortStartScheduler+0x138>)
 80069e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069ee:	f000 f8dd 	bl	8006bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069f2:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <xPortStartScheduler+0x13c>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069f8:	f000 f8fc 	bl	8006bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069fc:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <xPortStartScheduler+0x140>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a0f      	ldr	r2, [pc, #60]	; (8006a40 <xPortStartScheduler+0x140>)
 8006a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a08:	f7ff ff66 	bl	80068d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a0c:	f7ff fd34 	bl	8006478 <vTaskSwitchContext>
	prvTaskExitError();
 8006a10:	f7ff ff22 	bl	8006858 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	e000ed00 	.word	0xe000ed00
 8006a24:	410fc271 	.word	0x410fc271
 8006a28:	410fc270 	.word	0x410fc270
 8006a2c:	e000e400 	.word	0xe000e400
 8006a30:	2000093c 	.word	0x2000093c
 8006a34:	20000940 	.word	0x20000940
 8006a38:	e000ed20 	.word	0xe000ed20
 8006a3c:	20000014 	.word	0x20000014
 8006a40:	e000ef34 	.word	0xe000ef34

08006a44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	607b      	str	r3, [r7, #4]
}
 8006a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a5e:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <vPortEnterCritical+0x58>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3301      	adds	r3, #1
 8006a64:	4a0d      	ldr	r2, [pc, #52]	; (8006a9c <vPortEnterCritical+0x58>)
 8006a66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a68:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <vPortEnterCritical+0x58>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d10f      	bne.n	8006a90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <vPortEnterCritical+0x5c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	603b      	str	r3, [r7, #0]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <vPortEnterCritical+0x4a>
	}
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	20000014 	.word	0x20000014
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aaa:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <vPortExitCritical+0x50>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <vPortExitCritical+0x24>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	607b      	str	r3, [r7, #4]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <vPortExitCritical+0x50>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	4a09      	ldr	r2, [pc, #36]	; (8006af4 <vPortExitCritical+0x50>)
 8006ad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ad2:	4b08      	ldr	r3, [pc, #32]	; (8006af4 <vPortExitCritical+0x50>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d105      	bne.n	8006ae6 <vPortExitCritical+0x42>
 8006ada:	2300      	movs	r3, #0
 8006adc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000014 	.word	0x20000014
	...

08006b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b00:	f3ef 8009 	mrs	r0, PSP
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <pxCurrentTCBConst>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	f01e 0f10 	tst.w	lr, #16
 8006b10:	bf08      	it	eq
 8006b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1a:	6010      	str	r0, [r2, #0]
 8006b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b24:	f380 8811 	msr	BASEPRI, r0
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f7ff fca2 	bl	8006478 <vTaskSwitchContext>
 8006b34:	f04f 0000 	mov.w	r0, #0
 8006b38:	f380 8811 	msr	BASEPRI, r0
 8006b3c:	bc09      	pop	{r0, r3}
 8006b3e:	6819      	ldr	r1, [r3, #0]
 8006b40:	6808      	ldr	r0, [r1, #0]
 8006b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b46:	f01e 0f10 	tst.w	lr, #16
 8006b4a:	bf08      	it	eq
 8006b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b50:	f380 8809 	msr	PSP, r0
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	f3af 8000 	nop.w

08006b60 <pxCurrentTCBConst>:
 8006b60:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop

08006b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	607b      	str	r3, [r7, #4]
}
 8006b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b82:	f7ff fbbb 	bl	80062fc <xTaskIncrementTick>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b8c:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <xPortSysTickHandler+0x40>)
 8006b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	2300      	movs	r3, #0
 8006b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f383 8811 	msr	BASEPRI, r3
}
 8006b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	e000ed04 	.word	0xe000ed04

08006bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <vPortSetupTimerInterrupt+0x34>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <vPortSetupTimerInterrupt+0x38>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <vPortSetupTimerInterrupt+0x3c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <vPortSetupTimerInterrupt+0x40>)
 8006bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc6:	099b      	lsrs	r3, r3, #6
 8006bc8:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <vPortSetupTimerInterrupt+0x44>)
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bce:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <vPortSetupTimerInterrupt+0x34>)
 8006bd0:	2207      	movs	r2, #7
 8006bd2:	601a      	str	r2, [r3, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	e000e010 	.word	0xe000e010
 8006be4:	e000e018 	.word	0xe000e018
 8006be8:	20000008 	.word	0x20000008
 8006bec:	10624dd3 	.word	0x10624dd3
 8006bf0:	e000e014 	.word	0xe000e014

08006bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c04 <vPortEnableVFP+0x10>
 8006bf8:	6801      	ldr	r1, [r0, #0]
 8006bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bfe:	6001      	str	r1, [r0, #0]
 8006c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c02:	bf00      	nop
 8006c04:	e000ed88 	.word	0xe000ed88

08006c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08a      	sub	sp, #40	; 0x28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c14:	f7ff fac8 	bl	80061a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c18:	4b58      	ldr	r3, [pc, #352]	; (8006d7c <pvPortMalloc+0x174>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c20:	f000 f910 	bl	8006e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c24:	4b56      	ldr	r3, [pc, #344]	; (8006d80 <pvPortMalloc+0x178>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f040 808e 	bne.w	8006d4e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01d      	beq.n	8006c74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c38:	2208      	movs	r2, #8
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d014      	beq.n	8006c74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f023 0307 	bic.w	r3, r3, #7
 8006c50:	3308      	adds	r3, #8
 8006c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <pvPortMalloc+0x6c>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	617b      	str	r3, [r7, #20]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d069      	beq.n	8006d4e <pvPortMalloc+0x146>
 8006c7a:	4b42      	ldr	r3, [pc, #264]	; (8006d84 <pvPortMalloc+0x17c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d864      	bhi.n	8006d4e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c84:	4b40      	ldr	r3, [pc, #256]	; (8006d88 <pvPortMalloc+0x180>)
 8006c86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c88:	4b3f      	ldr	r3, [pc, #252]	; (8006d88 <pvPortMalloc+0x180>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c8e:	e004      	b.n	8006c9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d903      	bls.n	8006cac <pvPortMalloc+0xa4>
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f1      	bne.n	8006c90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cac:	4b33      	ldr	r3, [pc, #204]	; (8006d7c <pvPortMalloc+0x174>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d04b      	beq.n	8006d4e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2208      	movs	r2, #8
 8006cbc:	4413      	add	r3, r2
 8006cbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	1ad2      	subs	r2, r2, r3
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d91f      	bls.n	8006d18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4413      	add	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <pvPortMalloc+0xf8>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	613b      	str	r3, [r7, #16]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d12:	69b8      	ldr	r0, [r7, #24]
 8006d14:	f000 f8f8 	bl	8006f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d18:	4b1a      	ldr	r3, [pc, #104]	; (8006d84 <pvPortMalloc+0x17c>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	4a18      	ldr	r2, [pc, #96]	; (8006d84 <pvPortMalloc+0x17c>)
 8006d24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d26:	4b17      	ldr	r3, [pc, #92]	; (8006d84 <pvPortMalloc+0x17c>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4b18      	ldr	r3, [pc, #96]	; (8006d8c <pvPortMalloc+0x184>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d203      	bcs.n	8006d3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d32:	4b14      	ldr	r3, [pc, #80]	; (8006d84 <pvPortMalloc+0x17c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a15      	ldr	r2, [pc, #84]	; (8006d8c <pvPortMalloc+0x184>)
 8006d38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <pvPortMalloc+0x178>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d4e:	f7ff fa39 	bl	80061c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <pvPortMalloc+0x16a>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	60fb      	str	r3, [r7, #12]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <pvPortMalloc+0x168>
	return pvReturn;
 8006d72:	69fb      	ldr	r3, [r7, #28]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3728      	adds	r7, #40	; 0x28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	2000154c 	.word	0x2000154c
 8006d80:	20001558 	.word	0x20001558
 8006d84:	20001550 	.word	0x20001550
 8006d88:	20001544 	.word	0x20001544
 8006d8c:	20001554 	.word	0x20001554

08006d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d048      	beq.n	8006e34 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006da2:	2308      	movs	r3, #8
 8006da4:	425b      	negs	r3, r3
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4413      	add	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	4b21      	ldr	r3, [pc, #132]	; (8006e3c <vPortFree+0xac>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4013      	ands	r3, r2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <vPortFree+0x44>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	60fb      	str	r3, [r7, #12]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <vPortFree+0x62>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	60bb      	str	r3, [r7, #8]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <vPortFree+0xac>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d019      	beq.n	8006e34 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d115      	bne.n	8006e34 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <vPortFree+0xac>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	43db      	mvns	r3, r3
 8006e12:	401a      	ands	r2, r3
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e18:	f7ff f9c6 	bl	80061a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <vPortFree+0xb0>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4413      	add	r3, r2
 8006e26:	4a06      	ldr	r2, [pc, #24]	; (8006e40 <vPortFree+0xb0>)
 8006e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e2a:	6938      	ldr	r0, [r7, #16]
 8006e2c:	f000 f86c 	bl	8006f08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e30:	f7ff f9c8 	bl	80061c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e34:	bf00      	nop
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20001558 	.word	0x20001558
 8006e40:	20001550 	.word	0x20001550

08006e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e50:	4b27      	ldr	r3, [pc, #156]	; (8006ef0 <prvHeapInit+0xac>)
 8006e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00c      	beq.n	8006e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3307      	adds	r3, #7
 8006e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0307 	bic.w	r3, r3, #7
 8006e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	4a1f      	ldr	r2, [pc, #124]	; (8006ef0 <prvHeapInit+0xac>)
 8006e74:	4413      	add	r3, r2
 8006e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e7c:	4a1d      	ldr	r2, [pc, #116]	; (8006ef4 <prvHeapInit+0xb0>)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e82:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <prvHeapInit+0xb0>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e90:	2208      	movs	r2, #8
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1a9b      	subs	r3, r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0307 	bic.w	r3, r3, #7
 8006e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <prvHeapInit+0xb4>)
 8006ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ea6:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <prvHeapInit+0xb4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eae:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <prvHeapInit+0xb4>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <prvHeapInit+0xb4>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4a0a      	ldr	r2, [pc, #40]	; (8006efc <prvHeapInit+0xb8>)
 8006ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	4a09      	ldr	r2, [pc, #36]	; (8006f00 <prvHeapInit+0xbc>)
 8006eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006edc:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <prvHeapInit+0xc0>)
 8006ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ee2:	601a      	str	r2, [r3, #0]
}
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	20000944 	.word	0x20000944
 8006ef4:	20001544 	.word	0x20001544
 8006ef8:	2000154c 	.word	0x2000154c
 8006efc:	20001554 	.word	0x20001554
 8006f00:	20001550 	.word	0x20001550
 8006f04:	20001558 	.word	0x20001558

08006f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f10:	4b28      	ldr	r3, [pc, #160]	; (8006fb4 <prvInsertBlockIntoFreeList+0xac>)
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e002      	b.n	8006f1c <prvInsertBlockIntoFreeList+0x14>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d8f7      	bhi.n	8006f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	4413      	add	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d108      	bne.n	8006f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	441a      	add	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	441a      	add	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d118      	bne.n	8006f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b15      	ldr	r3, [pc, #84]	; (8006fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d00d      	beq.n	8006f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	441a      	add	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	e008      	b.n	8006f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	e003      	b.n	8006f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d002      	beq.n	8006fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20001544 	.word	0x20001544
 8006fb8:	2000154c 	.word	0x2000154c

08006fbc <__libc_init_array>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	4d0d      	ldr	r5, [pc, #52]	; (8006ff4 <__libc_init_array+0x38>)
 8006fc0:	4c0d      	ldr	r4, [pc, #52]	; (8006ff8 <__libc_init_array+0x3c>)
 8006fc2:	1b64      	subs	r4, r4, r5
 8006fc4:	10a4      	asrs	r4, r4, #2
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	42a6      	cmp	r6, r4
 8006fca:	d109      	bne.n	8006fe0 <__libc_init_array+0x24>
 8006fcc:	4d0b      	ldr	r5, [pc, #44]	; (8006ffc <__libc_init_array+0x40>)
 8006fce:	4c0c      	ldr	r4, [pc, #48]	; (8007000 <__libc_init_array+0x44>)
 8006fd0:	f000 f820 	bl	8007014 <_init>
 8006fd4:	1b64      	subs	r4, r4, r5
 8006fd6:	10a4      	asrs	r4, r4, #2
 8006fd8:	2600      	movs	r6, #0
 8006fda:	42a6      	cmp	r6, r4
 8006fdc:	d105      	bne.n	8006fea <__libc_init_array+0x2e>
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe4:	4798      	blx	r3
 8006fe6:	3601      	adds	r6, #1
 8006fe8:	e7ee      	b.n	8006fc8 <__libc_init_array+0xc>
 8006fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fee:	4798      	blx	r3
 8006ff0:	3601      	adds	r6, #1
 8006ff2:	e7f2      	b.n	8006fda <__libc_init_array+0x1e>
 8006ff4:	080070cc 	.word	0x080070cc
 8006ff8:	080070cc 	.word	0x080070cc
 8006ffc:	080070cc 	.word	0x080070cc
 8007000:	080070d0 	.word	0x080070d0

08007004 <memset>:
 8007004:	4402      	add	r2, r0
 8007006:	4603      	mov	r3, r0
 8007008:	4293      	cmp	r3, r2
 800700a:	d100      	bne.n	800700e <memset+0xa>
 800700c:	4770      	bx	lr
 800700e:	f803 1b01 	strb.w	r1, [r3], #1
 8007012:	e7f9      	b.n	8007008 <memset+0x4>

08007014 <_init>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	bf00      	nop
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr

08007020 <_fini>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr
